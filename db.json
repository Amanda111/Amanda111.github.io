{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"19e96ed410bbef58a1638305b785c5771cc2c32d","modified":1507729134000},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1471743489000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1471743489000},{"_id":"themes/next/.DS_Store","hash":"fec2b110509eeed1b3b8c2d664e1a938623f9d8b","modified":1488790258000},{"_id":"themes/next/.gitignore","hash":"c8d6a73b9e17f0f8a3716e4ada6960d3180425a6","modified":1471743489000},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1471743489000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1471743489000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1471743489000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1471743489000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1471743489000},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1471743489000},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1471743489000},{"_id":"themes/next/_config.yml","hash":"8f1122cd67e2b11a55cb5f11e8b32f9b7cf324f7","modified":1557301915468},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1471743489000},{"_id":"source/_posts/.DS_Store","hash":"dff3722c3b69e972b5fb02d43e0de4fa0ad58428","modified":1471078253000},{"_id":"source/_posts/Vue-Table.md","hash":"4de8a2a0eecb76b42c643c36a2f3460cdaf21ec5","modified":1508404665000},{"_id":"source/_posts/list-style-image.md","hash":"a1299a0f3ff0247c81c4ee03a0111763f18c7a0c","modified":1457051266000},{"_id":"source/_posts/Yet-Another-JavaScript-Bridge.md","hash":"f782298ff568caa2e165f94e658f192f86989490","modified":1491494456000},{"_id":"source/_posts/modularity.md","hash":"164a1a0fb4f5ea1d92db0a5784e46fad09f309cd","modified":1458221892000},{"_id":"source/_posts/初识Event-Emitter.md","hash":"83b829829b269fe58676c78744427efa7928d02f","modified":1481435819000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1471743489000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1471743489000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1471743489000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1471743489000},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1471743489000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1471743489000},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1471743489000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1471743489000},{"_id":"themes/next/languages/ko.yml","hash":"ce8b047c89daae77c03482fc76f16ffec6bdbf2d","modified":1471743489000},{"_id":"themes/next/languages/pt-BR.yml","hash":"462aa865ca3d479bcf6b363cba61247b50f230ff","modified":1471743489000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1471743489000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1471743489000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1471743489000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1471743489000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1471743489000},{"_id":"themes/next/scripts/.DS_Store","hash":"c98903337f4b389d7deeb42e7671bf4eca926608","modified":1488790252000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1471743489000},{"_id":"themes/next/layout/.DS_Store","hash":"cb0f640bc115bd272fa82c96f765dfddd970dfec","modified":1488790252000},{"_id":"themes/next/layout/_layout.swig","hash":"74157f6cfd679ea11febec632542793f37c5e5d4","modified":1471743489000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1471743489000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1471743489000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1471743489000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1471743489000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1471743489000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1471743489000},{"_id":"themes/next/source/.DS_Store","hash":"bf87b9a39f4c7e79bcab90d06d32ccea924b4015","modified":1488790252000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1471743489000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1471743489000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1471743489000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471743489000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1471743489000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1471743489000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1471743489000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1471743489000},{"_id":"themes/next/layout/_macro/post.swig","hash":"f3895bf44a9fb7c462f2e57b9a914703c2f152ba","modified":1471743489000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1471743489000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1a77843ce5eac62151dc3d38f0a36c43e19e1a74","modified":1471743489000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1471743489000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"58fd826ca75b0cbc48b61a58da4b841e2fa34403","modified":1471743489000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1471743489000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4fe588ff8ba8587885c2936db2df490774f89e10","modified":1471743489000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b0c495b8154ef8b2d2cb0a554e164ff22cdc962","modified":1471743489000},{"_id":"themes/next/layout/_partials/header.swig","hash":"eb028685cb3c329537bbced06c063d23e6a33817","modified":1471743489000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1471743489000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1471743489000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1471743489000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1471743489000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1471743489000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1471743489000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1471743489000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1471743489000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1471743489000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1471743489000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1471743489000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1471743489000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1471743489000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1471743489000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1471743489000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1471743489000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1471743489000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1471743489000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1471743489000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1471743489000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471743489000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471743489000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471743489000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471743489000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471743489000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471743489000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471743489000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1471743489000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1471743489000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1471743489000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1471743489000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1471743489000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1471743489000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1471743489000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1471743489000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1471743489000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1471743489000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1471743489000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1471743489000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"7f7148c8f52e4d3cfc070d964160362179fa8e91","modified":1471743489000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1471743489000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1471743489000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1471743489000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1471743489000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1471743489000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1471743489000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1471743489000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1471743489000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1471743489000},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1471743489000},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1471743489000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1471743489000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1471743489000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1471743489000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1471743489000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1471743489000},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1471743489000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1471743489000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1471743489000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1471743489000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1471743489000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1471743489000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1471743489000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1471743489000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1471743489000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1471743489000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1471743489000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1471743489000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1471743489000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1471743489000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1471743489000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1471743489000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1471743489000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1471743489000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1471743489000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1471743489000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1471743489000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1471743489000},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1471743489000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1471743489000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1471743489000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1471743489000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"1e3e1c6231408e18e8485a8e0e59e8880349b210","modified":1471743489000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1471743489000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1471743489000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1471743489000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"bff3b18f56175c53f3bc6d733166c4d998e08732","modified":1471743489000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"696666141cdd204fd8818ac2ad18f05e320f8587","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1471743489000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1471743489000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1471743489000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1471743489000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1471743489000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1471743489000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1471743489000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1471743489000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1471743489000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1471743489000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1471743489000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1471743489000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1471743489000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1471743489000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1471743489000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1471743489000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1471743489000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1471743489000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1471743489000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1471743489000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1471743489000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1471743489000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1471743489000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1471743489000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1471743489000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1471743489000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1471743489000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1471743489000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1471743489000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1471743489000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1471743489000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1471743489000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1471743489000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1471743489000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1471743489000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1471743489000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1471743489000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1471743489000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1471743489000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1471743489000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1471743489000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1471743489000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1471743489000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1471743489000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1471743489000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1471743489000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1471743489000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1471743489000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1471743489000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1471743489000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1471743489000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1471743489000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1471743489000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1471743489000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1471743489000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1471743489000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1471743489000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1471743489000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1471743489000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1471743489000}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Vue2.x Table 组件","date":"2017-10-11T13:34:34.000Z","_content":"\nVue2.x Table 组件从0到1。\n\n### API设计\n \nTable组件是个功能比较复杂的组件，所以我们在尝试写一个Vue-table组件之前，参考了一些常用UI组件库中Table组件的设计。首先看的是同样基于Vue的Element组件库，其中的Table组件用法如下：\n\n```\n<template>\n\t<el-table\n\t  :data=\"tableData\"\n\t  style=\"width: 100%\">\n\t  <el-table-column\n\t    prop=\"name\"\n\t    label=\"姓名\"\n\t    width=\"180\">\n\t  </el-table-column>\n\t  <el-table-column\n\t    prop=\"address\"\n\t    label=\"地址\">\n\t  </el-table-column>\n\t</el-table>\n</template>\n\n<script>\n\texport default {\n\t  data() {\n\t    return {\n\t      tableData: [{\n\t        name: '王小虎',\n\t        address: '上海市普陀区金沙江路 1518 弄'\n\t      }, ...]\n\t    }\n\t  }\n\t}\n</script>\n```\n\n我们可以把表格的信息分为两部分，一部分是表格的数据，另一部分是表格的排列信息。那么在Element UI中，表格数据需要定义在data中，再通过props传到table组件里。表格排列信息则定义在`el-table-column`子组件中。\n\n接下来，再看另一个UI组件库ant design，其Table组件用法如下:\n\n```\nconst dataSource = [{\n  key: '1',\n  name: '胡彦斌',\n  age: 32,\n  address: '西湖区湖底公园1号'\n}, ...];\n\nconst columns = [{\n  title: '姓名',\n  dataIndex: 'name',\n  key: 'name',\n}, {\n  title: '年龄',\n  dataIndex: 'age',\n  key: 'age',\n}, {\n  title: '住址',\n  dataIndex: 'address',\n  key: 'address',\n}];\n\n<Table dataSource={dataSource} columns={columns} />\n```\n\n与Element UI不同，ant design表格列的信息通过props传入组件。\n\n将两个UI库中Table组件相比之后，我们觉得Element UI让用户把表格列信息写在模板中的设计更加直观清晰。所以，最后决定参考Element UI的设计。\n\n----\n\n### 初步设计\n\n用法：\n\n```\n<template>\n\t<m-table :data=\"tableData\">\n\t    <m-table-col\n\t    prop=\"name\"\n\t    label=\"姓名\"\n\t    width=\"10%\">\n\t    </m-table-col>\n\t    <m-table-col\n\t    prop=\"address\"\n\t    label=\"地址\"\n\t    width=\"40%\">\n\t    </m-table-col>\n\t</m-table>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      tableData: [{\n        name: '王小虎',\n        address: '上海市普陀区金沙江路 1518 弄'\n      }, ...]\n    }\n  }\n}\n</script>\n```\n\n这里的`<m-table-col>`组件只作为接入组件，并不具有展示功能。它的主要工作是在其初始化的时候将列的信息，如`prop`、`label`、`width`保存到一个对象中，将该对象`$emit`到父组件`m-table`上。`m-table`组件再将所有列组件的信息保存到`columns`数组中。\n\n我们再来看一下渲染表头和表格主体的展示组件，其关系如下：\n\n```\n<m-table>\n    <m-table-head :columns=\"columns\"></m-table-head>\n    <m-table-body :data=\"data\" :columns=\"columns\"></m-table-body>\n</m-table>\n```\n\n`<m-table-head>`组件负责渲染表头，`m-table-body`组件负责渲染表格主体。这两个组件所作的处理就是循环生成`<th>`、`<td>`等表格元素，组合成一个表格。至此，一个可以展示数据的Table组件就算完成了。\n\n但是，表格一般需要有一定的操作功能，比较常用的一个就是选中删除某一行。然而，在完成这一步的时候我们遇到了一些问题。\n\n----\n\n### 自定义column\n\n假设现在要定义一列删除按钮，要如何让用户自如地定义按钮组件，最终在表格内部正常渲染，且点击具体的按钮可以获得对应row的信息？\n\n一开始我们设想用`slot`获得子Vnode节点，它们记录了用户自定义组件声明时的内嵌内容，将它们保存在`columns`数组中，再在每一行重复渲染。初步设计如下:\n\n```\n<m-table-col\n\tlabel=\"操作\"\n\tprop=\"active\"\n\twidth=\"10%\">\n\t<m-button></m-button>\n</m-table-col>\n```\n\n然而VNode是唯一的，而且即使将VNode深复制，也不可能动态改变VNode，比如把每一行的id传进该VNode。\n\n最后的解决方法是`$scopedSlots`。scopedSlots被编译后，返回一个函数，该函数可以动态传入scope并生成VNode，问题便迎刃而解了。\n\n#### Links:\n\n[Table组件中slot内容的跨级传递](http://zxc0328.github.io/2017/09/19/table-component-slot-passing/)\n","source":"_posts/Vue-Table.md","raw":"---\ntitle: Vue2.x Table 组件\ndate: 2017-10-11 21:34:34\ntags:\n---\n\nVue2.x Table 组件从0到1。\n\n### API设计\n \nTable组件是个功能比较复杂的组件，所以我们在尝试写一个Vue-table组件之前，参考了一些常用UI组件库中Table组件的设计。首先看的是同样基于Vue的Element组件库，其中的Table组件用法如下：\n\n```\n<template>\n\t<el-table\n\t  :data=\"tableData\"\n\t  style=\"width: 100%\">\n\t  <el-table-column\n\t    prop=\"name\"\n\t    label=\"姓名\"\n\t    width=\"180\">\n\t  </el-table-column>\n\t  <el-table-column\n\t    prop=\"address\"\n\t    label=\"地址\">\n\t  </el-table-column>\n\t</el-table>\n</template>\n\n<script>\n\texport default {\n\t  data() {\n\t    return {\n\t      tableData: [{\n\t        name: '王小虎',\n\t        address: '上海市普陀区金沙江路 1518 弄'\n\t      }, ...]\n\t    }\n\t  }\n\t}\n</script>\n```\n\n我们可以把表格的信息分为两部分，一部分是表格的数据，另一部分是表格的排列信息。那么在Element UI中，表格数据需要定义在data中，再通过props传到table组件里。表格排列信息则定义在`el-table-column`子组件中。\n\n接下来，再看另一个UI组件库ant design，其Table组件用法如下:\n\n```\nconst dataSource = [{\n  key: '1',\n  name: '胡彦斌',\n  age: 32,\n  address: '西湖区湖底公园1号'\n}, ...];\n\nconst columns = [{\n  title: '姓名',\n  dataIndex: 'name',\n  key: 'name',\n}, {\n  title: '年龄',\n  dataIndex: 'age',\n  key: 'age',\n}, {\n  title: '住址',\n  dataIndex: 'address',\n  key: 'address',\n}];\n\n<Table dataSource={dataSource} columns={columns} />\n```\n\n与Element UI不同，ant design表格列的信息通过props传入组件。\n\n将两个UI库中Table组件相比之后，我们觉得Element UI让用户把表格列信息写在模板中的设计更加直观清晰。所以，最后决定参考Element UI的设计。\n\n----\n\n### 初步设计\n\n用法：\n\n```\n<template>\n\t<m-table :data=\"tableData\">\n\t    <m-table-col\n\t    prop=\"name\"\n\t    label=\"姓名\"\n\t    width=\"10%\">\n\t    </m-table-col>\n\t    <m-table-col\n\t    prop=\"address\"\n\t    label=\"地址\"\n\t    width=\"40%\">\n\t    </m-table-col>\n\t</m-table>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      tableData: [{\n        name: '王小虎',\n        address: '上海市普陀区金沙江路 1518 弄'\n      }, ...]\n    }\n  }\n}\n</script>\n```\n\n这里的`<m-table-col>`组件只作为接入组件，并不具有展示功能。它的主要工作是在其初始化的时候将列的信息，如`prop`、`label`、`width`保存到一个对象中，将该对象`$emit`到父组件`m-table`上。`m-table`组件再将所有列组件的信息保存到`columns`数组中。\n\n我们再来看一下渲染表头和表格主体的展示组件，其关系如下：\n\n```\n<m-table>\n    <m-table-head :columns=\"columns\"></m-table-head>\n    <m-table-body :data=\"data\" :columns=\"columns\"></m-table-body>\n</m-table>\n```\n\n`<m-table-head>`组件负责渲染表头，`m-table-body`组件负责渲染表格主体。这两个组件所作的处理就是循环生成`<th>`、`<td>`等表格元素，组合成一个表格。至此，一个可以展示数据的Table组件就算完成了。\n\n但是，表格一般需要有一定的操作功能，比较常用的一个就是选中删除某一行。然而，在完成这一步的时候我们遇到了一些问题。\n\n----\n\n### 自定义column\n\n假设现在要定义一列删除按钮，要如何让用户自如地定义按钮组件，最终在表格内部正常渲染，且点击具体的按钮可以获得对应row的信息？\n\n一开始我们设想用`slot`获得子Vnode节点，它们记录了用户自定义组件声明时的内嵌内容，将它们保存在`columns`数组中，再在每一行重复渲染。初步设计如下:\n\n```\n<m-table-col\n\tlabel=\"操作\"\n\tprop=\"active\"\n\twidth=\"10%\">\n\t<m-button></m-button>\n</m-table-col>\n```\n\n然而VNode是唯一的，而且即使将VNode深复制，也不可能动态改变VNode，比如把每一行的id传进该VNode。\n\n最后的解决方法是`$scopedSlots`。scopedSlots被编译后，返回一个函数，该函数可以动态传入scope并生成VNode，问题便迎刃而解了。\n\n#### Links:\n\n[Table组件中slot内容的跨级传递](http://zxc0328.github.io/2017/09/19/table-component-slot-passing/)\n","slug":"Vue-Table","published":1,"updated":"2017-10-19T09:17:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwg4o3sz00006v6kp974ovpf","content":"<p>Vue2.x Table 组件从0到1。</p>\n<h3 id=\"API设计\"><a href=\"#API设计\" class=\"headerlink\" title=\"API设计\"></a>API设计</h3><p>Table组件是个功能比较复杂的组件，所以我们在尝试写一个Vue-table组件之前，参考了一些常用UI组件库中Table组件的设计。首先看的是同样基于Vue的Element组件库，其中的Table组件用法如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">el-table</span></span></span><br><span class=\"line\"><span class=\"tag\">\t  <span class=\"attr\">:data</span>=<span class=\"string\">\"tableData\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t  <span class=\"attr\">style</span>=<span class=\"string\">\"width: 100%\"</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span></span></span><br><span class=\"line\"><span class=\"tag\">\t    <span class=\"attr\">prop</span>=<span class=\"string\">\"name\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t    <span class=\"attr\">label</span>=<span class=\"string\">\"姓名\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t    <span class=\"attr\">width</span>=<span class=\"string\">\"180\"</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span></span></span><br><span class=\"line\"><span class=\"tag\">\t    <span class=\"attr\">prop</span>=<span class=\"string\">\"address\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t    <span class=\"attr\">label</span>=<span class=\"string\">\"地址\"</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">el-table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">\t  data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\">\t      tableData: [&#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t        name: <span class=\"string\">'王小虎'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t        address: <span class=\"string\">'上海市普陀区金沙江路 1518 弄'</span></span></span><br><span class=\"line\">\t      &#125;, ...]</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们可以把表格的信息分为两部分，一部分是表格的数据，另一部分是表格的排列信息。那么在Element UI中，表格数据需要定义在data中，再通过props传到table组件里。表格排列信息则定义在<code>el-table-column</code>子组件中。</p>\n<p>接下来，再看另一个UI组件库ant design，其Table组件用法如下:</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> dataSource = [&#123;</span><br><span class=\"line\">  <span class=\"built_in\">key</span>: <span class=\"string\">'1'</span>,</span><br><span class=\"line\">  name: <span class=\"string\">'胡彦斌'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">32</span>,</span><br><span class=\"line\">  address: <span class=\"string\">'西湖区湖底公园1号'</span></span><br><span class=\"line\">&#125;, ...];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> columns = [&#123;</span><br><span class=\"line\">  title: <span class=\"string\">'姓名'</span>,</span><br><span class=\"line\">  dataIndex: <span class=\"string\">'name'</span>,</span><br><span class=\"line\">  <span class=\"built_in\">key</span>: <span class=\"string\">'name'</span>,</span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  title: <span class=\"string\">'年龄'</span>,</span><br><span class=\"line\">  dataIndex: <span class=\"string\">'age'</span>,</span><br><span class=\"line\">  <span class=\"built_in\">key</span>: <span class=\"string\">'age'</span>,</span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  title: <span class=\"string\">'住址'</span>,</span><br><span class=\"line\">  dataIndex: <span class=\"string\">'address'</span>,</span><br><span class=\"line\">  <span class=\"built_in\">key</span>: <span class=\"string\">'address'</span>,</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;<span class=\"keyword\">Table</span> dataSource=&#123;dataSource&#125; columns=&#123;columns&#125; /&gt;</span><br></pre></td></tr></table></figure>\n<p>与Element UI不同，ant design表格列的信息通过props传入组件。</p>\n<p>将两个UI库中Table组件相比之后，我们觉得Element UI让用户把表格列信息写在模板中的设计更加直观清晰。所以，最后决定参考Element UI的设计。</p>\n<hr>\n<h3 id=\"初步设计\"><a href=\"#初步设计\" class=\"headerlink\" title=\"初步设计\"></a>初步设计</h3><p>用法：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">m-table</span> <span class=\"attr\">:data</span>=<span class=\"string\">\"tableData\"</span>&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">m-table-col</span></span></span><br><span class=\"line\"><span class=\"tag\">\t    <span class=\"attr\">prop</span>=<span class=\"string\">\"name\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t    <span class=\"attr\">label</span>=<span class=\"string\">\"姓名\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t    <span class=\"attr\">width</span>=<span class=\"string\">\"10%\"</span>&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;/<span class=\"name\">m-table-col</span>&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">m-table-col</span></span></span><br><span class=\"line\"><span class=\"tag\">\t    <span class=\"attr\">prop</span>=<span class=\"string\">\"address\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t    <span class=\"attr\">label</span>=<span class=\"string\">\"地址\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t    <span class=\"attr\">width</span>=<span class=\"string\">\"40%\"</span>&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;/<span class=\"name\">m-table-col</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">m-table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\">      tableData: [&#123;</span><br><span class=\"line\"><span class=\"actionscript\">        name: <span class=\"string\">'王小虎'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">        address: <span class=\"string\">'上海市普陀区金沙江路 1518 弄'</span></span></span><br><span class=\"line\">      &#125;, ...]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这里的<code>&lt;m-table-col&gt;</code>组件只作为接入组件，并不具有展示功能。它的主要工作是在其初始化的时候将列的信息，如<code>prop</code>、<code>label</code>、<code>width</code>保存到一个对象中，将该对象<code>$emit</code>到父组件<code>m-table</code>上。<code>m-table</code>组件再将所有列组件的信息保存到<code>columns</code>数组中。</p>\n<p>我们再来看一下渲染表头和表格主体的展示组件，其关系如下：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;m-table&gt;</span><br><span class=\"line\">    &lt;m-table-head <span class=\"symbol\">:columns=<span class=\"string\">\"columns\"</span>&gt;&lt;/m-table-head&gt;</span></span><br><span class=\"line\">    &lt;m-table-body <span class=\"symbol\">:data=<span class=\"string\">\"data\"</span></span> <span class=\"symbol\">:columns=<span class=\"string\">\"columns\"</span>&gt;&lt;/m-table-body&gt;</span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/m-table&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>&lt;m-table-head&gt;</code>组件负责渲染表头，<code>m-table-body</code>组件负责渲染表格主体。这两个组件所作的处理就是循环生成<code>&lt;th&gt;</code>、<code>&lt;td&gt;</code>等表格元素，组合成一个表格。至此，一个可以展示数据的Table组件就算完成了。</p>\n<p>但是，表格一般需要有一定的操作功能，比较常用的一个就是选中删除某一行。然而，在完成这一步的时候我们遇到了一些问题。</p>\n<hr>\n<h3 id=\"自定义column\"><a href=\"#自定义column\" class=\"headerlink\" title=\"自定义column\"></a>自定义column</h3><p>假设现在要定义一列删除按钮，要如何让用户自如地定义按钮组件，最终在表格内部正常渲染，且点击具体的按钮可以获得对应row的信息？</p>\n<p>一开始我们设想用<code>slot</code>获得子Vnode节点，它们记录了用户自定义组件声明时的内嵌内容，将它们保存在<code>columns</code>数组中，再在每一行重复渲染。初步设计如下:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">m-table-col</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">label</span>=<span class=\"string\">\"操作\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">prop</span>=<span class=\"string\">\"active\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">width</span>=<span class=\"string\">\"10%\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">m-button</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">m-button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">m-table-col</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然而VNode是唯一的，而且即使将VNode深复制，也不可能动态改变VNode，比如把每一行的id传进该VNode。</p>\n<p>最后的解决方法是<code>$scopedSlots</code>。scopedSlots被编译后，返回一个函数，该函数可以动态传入scope并生成VNode，问题便迎刃而解了。</p>\n<h4 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links:\"></a>Links:</h4><p><a href=\"http://zxc0328.github.io/2017/09/19/table-component-slot-passing/\" target=\"_blank\" rel=\"noopener\">Table组件中slot内容的跨级传递</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Vue2.x Table 组件从0到1。</p>\n<h3 id=\"API设计\"><a href=\"#API设计\" class=\"headerlink\" title=\"API设计\"></a>API设计</h3><p>Table组件是个功能比较复杂的组件，所以我们在尝试写一个Vue-table组件之前，参考了一些常用UI组件库中Table组件的设计。首先看的是同样基于Vue的Element组件库，其中的Table组件用法如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">el-table</span></span></span><br><span class=\"line\"><span class=\"tag\">\t  <span class=\"attr\">:data</span>=<span class=\"string\">\"tableData\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t  <span class=\"attr\">style</span>=<span class=\"string\">\"width: 100%\"</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span></span></span><br><span class=\"line\"><span class=\"tag\">\t    <span class=\"attr\">prop</span>=<span class=\"string\">\"name\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t    <span class=\"attr\">label</span>=<span class=\"string\">\"姓名\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t    <span class=\"attr\">width</span>=<span class=\"string\">\"180\"</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span></span></span><br><span class=\"line\"><span class=\"tag\">\t    <span class=\"attr\">prop</span>=<span class=\"string\">\"address\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t    <span class=\"attr\">label</span>=<span class=\"string\">\"地址\"</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">el-table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">\t  data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\">\t      tableData: [&#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t        name: <span class=\"string\">'王小虎'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t        address: <span class=\"string\">'上海市普陀区金沙江路 1518 弄'</span></span></span><br><span class=\"line\">\t      &#125;, ...]</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们可以把表格的信息分为两部分，一部分是表格的数据，另一部分是表格的排列信息。那么在Element UI中，表格数据需要定义在data中，再通过props传到table组件里。表格排列信息则定义在<code>el-table-column</code>子组件中。</p>\n<p>接下来，再看另一个UI组件库ant design，其Table组件用法如下:</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> dataSource = [&#123;</span><br><span class=\"line\">  <span class=\"built_in\">key</span>: <span class=\"string\">'1'</span>,</span><br><span class=\"line\">  name: <span class=\"string\">'胡彦斌'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">32</span>,</span><br><span class=\"line\">  address: <span class=\"string\">'西湖区湖底公园1号'</span></span><br><span class=\"line\">&#125;, ...];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> columns = [&#123;</span><br><span class=\"line\">  title: <span class=\"string\">'姓名'</span>,</span><br><span class=\"line\">  dataIndex: <span class=\"string\">'name'</span>,</span><br><span class=\"line\">  <span class=\"built_in\">key</span>: <span class=\"string\">'name'</span>,</span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  title: <span class=\"string\">'年龄'</span>,</span><br><span class=\"line\">  dataIndex: <span class=\"string\">'age'</span>,</span><br><span class=\"line\">  <span class=\"built_in\">key</span>: <span class=\"string\">'age'</span>,</span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  title: <span class=\"string\">'住址'</span>,</span><br><span class=\"line\">  dataIndex: <span class=\"string\">'address'</span>,</span><br><span class=\"line\">  <span class=\"built_in\">key</span>: <span class=\"string\">'address'</span>,</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;<span class=\"keyword\">Table</span> dataSource=&#123;dataSource&#125; columns=&#123;columns&#125; /&gt;</span><br></pre></td></tr></table></figure>\n<p>与Element UI不同，ant design表格列的信息通过props传入组件。</p>\n<p>将两个UI库中Table组件相比之后，我们觉得Element UI让用户把表格列信息写在模板中的设计更加直观清晰。所以，最后决定参考Element UI的设计。</p>\n<hr>\n<h3 id=\"初步设计\"><a href=\"#初步设计\" class=\"headerlink\" title=\"初步设计\"></a>初步设计</h3><p>用法：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">m-table</span> <span class=\"attr\">:data</span>=<span class=\"string\">\"tableData\"</span>&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">m-table-col</span></span></span><br><span class=\"line\"><span class=\"tag\">\t    <span class=\"attr\">prop</span>=<span class=\"string\">\"name\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t    <span class=\"attr\">label</span>=<span class=\"string\">\"姓名\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t    <span class=\"attr\">width</span>=<span class=\"string\">\"10%\"</span>&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;/<span class=\"name\">m-table-col</span>&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">m-table-col</span></span></span><br><span class=\"line\"><span class=\"tag\">\t    <span class=\"attr\">prop</span>=<span class=\"string\">\"address\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t    <span class=\"attr\">label</span>=<span class=\"string\">\"地址\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t    <span class=\"attr\">width</span>=<span class=\"string\">\"40%\"</span>&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;/<span class=\"name\">m-table-col</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">m-table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\">      tableData: [&#123;</span><br><span class=\"line\"><span class=\"actionscript\">        name: <span class=\"string\">'王小虎'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">        address: <span class=\"string\">'上海市普陀区金沙江路 1518 弄'</span></span></span><br><span class=\"line\">      &#125;, ...]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这里的<code>&lt;m-table-col&gt;</code>组件只作为接入组件，并不具有展示功能。它的主要工作是在其初始化的时候将列的信息，如<code>prop</code>、<code>label</code>、<code>width</code>保存到一个对象中，将该对象<code>$emit</code>到父组件<code>m-table</code>上。<code>m-table</code>组件再将所有列组件的信息保存到<code>columns</code>数组中。</p>\n<p>我们再来看一下渲染表头和表格主体的展示组件，其关系如下：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;m-table&gt;</span><br><span class=\"line\">    &lt;m-table-head <span class=\"symbol\">:columns=<span class=\"string\">\"columns\"</span>&gt;&lt;/m-table-head&gt;</span></span><br><span class=\"line\">    &lt;m-table-body <span class=\"symbol\">:data=<span class=\"string\">\"data\"</span></span> <span class=\"symbol\">:columns=<span class=\"string\">\"columns\"</span>&gt;&lt;/m-table-body&gt;</span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/m-table&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>&lt;m-table-head&gt;</code>组件负责渲染表头，<code>m-table-body</code>组件负责渲染表格主体。这两个组件所作的处理就是循环生成<code>&lt;th&gt;</code>、<code>&lt;td&gt;</code>等表格元素，组合成一个表格。至此，一个可以展示数据的Table组件就算完成了。</p>\n<p>但是，表格一般需要有一定的操作功能，比较常用的一个就是选中删除某一行。然而，在完成这一步的时候我们遇到了一些问题。</p>\n<hr>\n<h3 id=\"自定义column\"><a href=\"#自定义column\" class=\"headerlink\" title=\"自定义column\"></a>自定义column</h3><p>假设现在要定义一列删除按钮，要如何让用户自如地定义按钮组件，最终在表格内部正常渲染，且点击具体的按钮可以获得对应row的信息？</p>\n<p>一开始我们设想用<code>slot</code>获得子Vnode节点，它们记录了用户自定义组件声明时的内嵌内容，将它们保存在<code>columns</code>数组中，再在每一行重复渲染。初步设计如下:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">m-table-col</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">label</span>=<span class=\"string\">\"操作\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">prop</span>=<span class=\"string\">\"active\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">width</span>=<span class=\"string\">\"10%\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">m-button</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">m-button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">m-table-col</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然而VNode是唯一的，而且即使将VNode深复制，也不可能动态改变VNode，比如把每一行的id传进该VNode。</p>\n<p>最后的解决方法是<code>$scopedSlots</code>。scopedSlots被编译后，返回一个函数，该函数可以动态传入scope并生成VNode，问题便迎刃而解了。</p>\n<h4 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links:\"></a>Links:</h4><p><a href=\"http://zxc0328.github.io/2017/09/19/table-component-slot-passing/\" target=\"_blank\" rel=\"noopener\">Table组件中slot内容的跨级传递</a></p>\n"},{"title":"list-style-image sucks?","date":"2016-03-02T04:53:36.000Z","_content":"\n最近在学习jQuery，写一个文件夹开合的小组件。在阿里妈妈找了文件夹的svg图后，就准备把它们丢到list-style-image里。然而发现自己handle不了svg图的大小。于是，我寄希望于list-style-image有控制图大小的value。\n\n就去查了查之前一直没有用过的list-style。所以，list-style-image里有什么？\n\n** 先来看看MDN上关于list-style-iamge的介绍吧 **\n\n> ** Summary: **The list-style-image property sets the image that will be used as the list item marker. \n\n> ** Values: **   url/none/inherited\n\n>** Applies to: ** list-item \n\n好像并没有能解决我问题的value。 ** 但后来，我学会通过改svg图的源码来设置图的大小。嗯，解决了svg图的问题 **\n\n可大家一般都怎么使用list-style-iamge呢？ ** 再后来，我发现大家真的都不怎么用它:) **\n\n ----------------\n\n##### 去看看阿里的官网\n\n<img src=\"http://d.pr/i/1f9df/alibaba.png\">\n\n代码应该是这个样子的。可以看到它是在** i标签里插入图片 **，实现marker的效果\n\n<p data-height=\"224\" data-theme-id=\"0\" data-slug-hash=\"LNEmMN\" data-default-tab=\"result\" data-user=\"amanda111\" class='codepen'>See the Pen <a href='http://codepen.io/amanda111/pen/LNEmMN/'>LNEmMN</a> by AMANDA (<a href='http://codepen.io/amanda111'>@amanda111</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n\n ------------------\n\n\n##### 再看看twitter的官网\n\n<img src=\"http://d.pr/i/8GiH/twitter.png\">\n\n** 用的是伪元素:before **\n\n<p data-height=\"174\" data-theme-id=\"0\" data-slug-hash=\"oxgyQE\" data-default-tab=\"result\" data-user=\"amanda111\" class='codepen'>See the Pen <a href='http://codepen.io/amanda111/pen/oxgyQE/'>oxgyQE</a> by AMANDA (<a href='http://codepen.io/amanda111'>@amanda111</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n-----------------------------------------------------------------------------------\n\n更多的是** 用设置background-image的方法 **，设置background no-repeat，再给内容设一个合适的padding-left的值，就把background-image变到内容前面了。就有了小图标的赶脚。\n<p data-height=\"219\" data-theme-id=\"0\" data-slug-hash=\"xVbWQQ\" data-default-tab=\"html\" data-user=\"amanda111\" class='codepen'>See the Pen <a href='http://codepen.io/amanda111/pen/xVbWQQ/'>xVbWQQ</a> by AMANDA (<a href='http://codepen.io/amanda111'>@amanda111</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n-----------------------------------------------------\n\n现在用** list-style-image **\n<p data-height=\"154\" data-theme-id=\"0\" data-slug-hash=\"pyvKdz\" data-default-tab=\"html\" data-user=\"amanda111\" class='codepen'>See the Pen <a href='http://codepen.io/amanda111/pen/pyvKdz/'>pyvKdz</a> by AMANDA (<a href='http://codepen.io/amanda111'>@amanda111</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n噢..发生了什么？用list-style-image插入小图标，发现image和内容之间有逼死强迫症的间距呀。**而这个间距又是什么呢？**\n\n当不改变li标签样式的时，默认样式为list-style：disc。这时就可以看到实心点和内容的间距。这个间距应该是不能被改变的，是由浏览器决定的。所以，list-style-image 属性会有兼容性问题。\n\n想到要调整图片位置，就想到有 *list-style-position*\n\n#### so what is list-style-position?\n\n> **Initial values: ** outside\n\n> ** Values: ** inside/outside\n\n> ** Applies to: ** list-item\n\n<p data-height=\"338\" data-theme-id=\"0\" data-slug-hash=\"aNzgxR\" data-default-tab=\"html\" data-user=\"amanda111\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/amanda111/pen/aNzgxR/\">aNzgxR</a> by AMANDA (<a href=\"http://codepen.io/amanda111\">@amanda111</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n> ** outside: **The marker box is outside the principal block box\n\n> ** inside: **The marker box is the first inline box in the principal block box, after which the element's content flows.\n\n就只有这两个value。所以..它并不能解决marker与内容的间距问题。但是，如果list-style-position有控制间距的value。\n\n### Actually，list-style-image is just fine.\n\n\n -------------------------------------------\n\n\n*[Reference Documentation]*\n\n[1]<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/list-style\">MDN list-style</a>","source":"_posts/list-style-image.md","raw":"title: list-style-image sucks?\ndate: 2016-03-02 12:53:36\ntags:\n---\n\n最近在学习jQuery，写一个文件夹开合的小组件。在阿里妈妈找了文件夹的svg图后，就准备把它们丢到list-style-image里。然而发现自己handle不了svg图的大小。于是，我寄希望于list-style-image有控制图大小的value。\n\n就去查了查之前一直没有用过的list-style。所以，list-style-image里有什么？\n\n** 先来看看MDN上关于list-style-iamge的介绍吧 **\n\n> ** Summary: **The list-style-image property sets the image that will be used as the list item marker. \n\n> ** Values: **   url/none/inherited\n\n>** Applies to: ** list-item \n\n好像并没有能解决我问题的value。 ** 但后来，我学会通过改svg图的源码来设置图的大小。嗯，解决了svg图的问题 **\n\n可大家一般都怎么使用list-style-iamge呢？ ** 再后来，我发现大家真的都不怎么用它:) **\n\n ----------------\n\n##### 去看看阿里的官网\n\n<img src=\"http://d.pr/i/1f9df/alibaba.png\">\n\n代码应该是这个样子的。可以看到它是在** i标签里插入图片 **，实现marker的效果\n\n<p data-height=\"224\" data-theme-id=\"0\" data-slug-hash=\"LNEmMN\" data-default-tab=\"result\" data-user=\"amanda111\" class='codepen'>See the Pen <a href='http://codepen.io/amanda111/pen/LNEmMN/'>LNEmMN</a> by AMANDA (<a href='http://codepen.io/amanda111'>@amanda111</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n\n ------------------\n\n\n##### 再看看twitter的官网\n\n<img src=\"http://d.pr/i/8GiH/twitter.png\">\n\n** 用的是伪元素:before **\n\n<p data-height=\"174\" data-theme-id=\"0\" data-slug-hash=\"oxgyQE\" data-default-tab=\"result\" data-user=\"amanda111\" class='codepen'>See the Pen <a href='http://codepen.io/amanda111/pen/oxgyQE/'>oxgyQE</a> by AMANDA (<a href='http://codepen.io/amanda111'>@amanda111</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n-----------------------------------------------------------------------------------\n\n更多的是** 用设置background-image的方法 **，设置background no-repeat，再给内容设一个合适的padding-left的值，就把background-image变到内容前面了。就有了小图标的赶脚。\n<p data-height=\"219\" data-theme-id=\"0\" data-slug-hash=\"xVbWQQ\" data-default-tab=\"html\" data-user=\"amanda111\" class='codepen'>See the Pen <a href='http://codepen.io/amanda111/pen/xVbWQQ/'>xVbWQQ</a> by AMANDA (<a href='http://codepen.io/amanda111'>@amanda111</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n-----------------------------------------------------\n\n现在用** list-style-image **\n<p data-height=\"154\" data-theme-id=\"0\" data-slug-hash=\"pyvKdz\" data-default-tab=\"html\" data-user=\"amanda111\" class='codepen'>See the Pen <a href='http://codepen.io/amanda111/pen/pyvKdz/'>pyvKdz</a> by AMANDA (<a href='http://codepen.io/amanda111'>@amanda111</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n噢..发生了什么？用list-style-image插入小图标，发现image和内容之间有逼死强迫症的间距呀。**而这个间距又是什么呢？**\n\n当不改变li标签样式的时，默认样式为list-style：disc。这时就可以看到实心点和内容的间距。这个间距应该是不能被改变的，是由浏览器决定的。所以，list-style-image 属性会有兼容性问题。\n\n想到要调整图片位置，就想到有 *list-style-position*\n\n#### so what is list-style-position?\n\n> **Initial values: ** outside\n\n> ** Values: ** inside/outside\n\n> ** Applies to: ** list-item\n\n<p data-height=\"338\" data-theme-id=\"0\" data-slug-hash=\"aNzgxR\" data-default-tab=\"html\" data-user=\"amanda111\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/amanda111/pen/aNzgxR/\">aNzgxR</a> by AMANDA (<a href=\"http://codepen.io/amanda111\">@amanda111</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n> ** outside: **The marker box is outside the principal block box\n\n> ** inside: **The marker box is the first inline box in the principal block box, after which the element's content flows.\n\n就只有这两个value。所以..它并不能解决marker与内容的间距问题。但是，如果list-style-position有控制间距的value。\n\n### Actually，list-style-image is just fine.\n\n\n -------------------------------------------\n\n\n*[Reference Documentation]*\n\n[1]<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/list-style\">MDN list-style</a>","slug":"list-style-image","published":1,"updated":"2016-03-04T00:27:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwg4o3t400016v6kdxeni6bb","content":"<p>最近在学习jQuery，写一个文件夹开合的小组件。在阿里妈妈找了文件夹的svg图后，就准备把它们丢到list-style-image里。然而发现自己handle不了svg图的大小。于是，我寄希望于list-style-image有控制图大小的value。</p>\n<p>就去查了查之前一直没有用过的list-style。所以，list-style-image里有什么？</p>\n<p><strong> 先来看看MDN上关于list-style-iamge的介绍吧 </strong></p>\n<blockquote>\n<p><strong> Summary: </strong>The list-style-image property sets the image that will be used as the list item marker. </p>\n</blockquote>\n<blockquote>\n<p><strong> Values: </strong>   url/none/inherited</p>\n</blockquote>\n<blockquote>\n<p><strong> Applies to: </strong> list-item </p>\n</blockquote>\n<p>好像并没有能解决我问题的value。 <strong> 但后来，我学会通过改svg图的源码来设置图的大小。嗯，解决了svg图的问题 </strong></p>\n<p>可大家一般都怎么使用list-style-iamge呢？ <strong> 再后来，我发现大家真的都不怎么用它:) </strong></p>\n<hr>\n<h5 id=\"去看看阿里的官网\"><a href=\"#去看看阿里的官网\" class=\"headerlink\" title=\"去看看阿里的官网\"></a>去看看阿里的官网</h5><p><img src=\"http://d.pr/i/1f9df/alibaba.png\"></p>\n<p>代码应该是这个样子的。可以看到它是在<strong> i标签里插入图片 </strong>，实现marker的效果</p>\n<p></p><p data-height=\"224\" data-theme-id=\"0\" data-slug-hash=\"LNEmMN\" data-default-tab=\"result\" data-user=\"amanda111\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/amanda111/pen/LNEmMN/\" target=\"_blank\" rel=\"noopener\">LNEmMN</a> by AMANDA (<a href=\"http://codepen.io/amanda111\" target=\"_blank\" rel=\"noopener\">@amanda111</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n\n<hr>\n<h5 id=\"再看看twitter的官网\"><a href=\"#再看看twitter的官网\" class=\"headerlink\" title=\"再看看twitter的官网\"></a>再看看twitter的官网</h5><p><img src=\"http://d.pr/i/8GiH/twitter.png\"></p>\n<p><strong> 用的是伪元素:before </strong></p>\n<p></p><p data-height=\"174\" data-theme-id=\"0\" data-slug-hash=\"oxgyQE\" data-default-tab=\"result\" data-user=\"amanda111\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/amanda111/pen/oxgyQE/\" target=\"_blank\" rel=\"noopener\">oxgyQE</a> by AMANDA (<a href=\"http://codepen.io/amanda111\" target=\"_blank\" rel=\"noopener\">@amanda111</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n<hr>\n<p>更多的是<strong> 用设置background-image的方法 </strong>，设置background no-repeat，再给内容设一个合适的padding-left的值，就把background-image变到内容前面了。就有了小图标的赶脚。</p>\n<p></p><p data-height=\"219\" data-theme-id=\"0\" data-slug-hash=\"xVbWQQ\" data-default-tab=\"html\" data-user=\"amanda111\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/amanda111/pen/xVbWQQ/\" target=\"_blank\" rel=\"noopener\">xVbWQQ</a> by AMANDA (<a href=\"http://codepen.io/amanda111\" target=\"_blank\" rel=\"noopener\">@amanda111</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n<hr>\n<p>现在用<strong> list-style-image </strong></p>\n<p></p><p data-height=\"154\" data-theme-id=\"0\" data-slug-hash=\"pyvKdz\" data-default-tab=\"html\" data-user=\"amanda111\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/amanda111/pen/pyvKdz/\" target=\"_blank\" rel=\"noopener\">pyvKdz</a> by AMANDA (<a href=\"http://codepen.io/amanda111\" target=\"_blank\" rel=\"noopener\">@amanda111</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n<p>噢..发生了什么？用list-style-image插入小图标，发现image和内容之间有逼死强迫症的间距呀。<strong>而这个间距又是什么呢？</strong></p>\n<p>当不改变li标签样式的时，默认样式为list-style：disc。这时就可以看到实心点和内容的间距。这个间距应该是不能被改变的，是由浏览器决定的。所以，list-style-image 属性会有兼容性问题。</p>\n<p>想到要调整图片位置，就想到有 <em>list-style-position</em></p>\n<h4 id=\"so-what-is-list-style-position\"><a href=\"#so-what-is-list-style-position\" class=\"headerlink\" title=\"so what is list-style-position?\"></a>so what is list-style-position?</h4><blockquote>\n<p><strong>Initial values: </strong> outside</p>\n</blockquote>\n<blockquote>\n<p><strong> Values: </strong> inside/outside</p>\n</blockquote>\n<blockquote>\n<p><strong> Applies to: </strong> list-item</p>\n</blockquote>\n<p></p><p data-height=\"338\" data-theme-id=\"0\" data-slug-hash=\"aNzgxR\" data-default-tab=\"html\" data-user=\"amanda111\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/amanda111/pen/aNzgxR/\" target=\"_blank\" rel=\"noopener\">aNzgxR</a> by AMANDA (<a href=\"http://codepen.io/amanda111\" target=\"_blank\" rel=\"noopener\">@amanda111</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n<blockquote>\n<p><strong> outside: </strong>The marker box is outside the principal block box</p>\n</blockquote>\n<blockquote>\n<p><strong> inside: </strong>The marker box is the first inline box in the principal block box, after which the element’s content flows.</p>\n</blockquote>\n<p>就只有这两个value。所以..它并不能解决marker与内容的间距问题。但是，如果list-style-position有控制间距的value。</p>\n<h3 id=\"Actually，list-style-image-is-just-fine\"><a href=\"#Actually，list-style-image-is-just-fine\" class=\"headerlink\" title=\"Actually，list-style-image is just fine.\"></a>Actually，list-style-image is just fine.</h3><hr>\n<p><em>[Reference Documentation]</em></p>\n<p>[1]<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/list-style\" target=\"_blank\" rel=\"noopener\">MDN list-style</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在学习jQuery，写一个文件夹开合的小组件。在阿里妈妈找了文件夹的svg图后，就准备把它们丢到list-style-image里。然而发现自己handle不了svg图的大小。于是，我寄希望于list-style-image有控制图大小的value。</p>\n<p>就去查了查之前一直没有用过的list-style。所以，list-style-image里有什么？</p>\n<p><strong> 先来看看MDN上关于list-style-iamge的介绍吧 </strong></p>\n<blockquote>\n<p><strong> Summary: </strong>The list-style-image property sets the image that will be used as the list item marker. </p>\n</blockquote>\n<blockquote>\n<p><strong> Values: </strong>   url/none/inherited</p>\n</blockquote>\n<blockquote>\n<p><strong> Applies to: </strong> list-item </p>\n</blockquote>\n<p>好像并没有能解决我问题的value。 <strong> 但后来，我学会通过改svg图的源码来设置图的大小。嗯，解决了svg图的问题 </strong></p>\n<p>可大家一般都怎么使用list-style-iamge呢？ <strong> 再后来，我发现大家真的都不怎么用它:) </strong></p>\n<hr>\n<h5 id=\"去看看阿里的官网\"><a href=\"#去看看阿里的官网\" class=\"headerlink\" title=\"去看看阿里的官网\"></a>去看看阿里的官网</h5><p><img src=\"http://d.pr/i/1f9df/alibaba.png\"></p>\n<p>代码应该是这个样子的。可以看到它是在<strong> i标签里插入图片 </strong>，实现marker的效果</p>\n<p></p><p data-height=\"224\" data-theme-id=\"0\" data-slug-hash=\"LNEmMN\" data-default-tab=\"result\" data-user=\"amanda111\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/amanda111/pen/LNEmMN/\" target=\"_blank\" rel=\"noopener\">LNEmMN</a> by AMANDA (<a href=\"http://codepen.io/amanda111\" target=\"_blank\" rel=\"noopener\">@amanda111</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n\n<hr>\n<h5 id=\"再看看twitter的官网\"><a href=\"#再看看twitter的官网\" class=\"headerlink\" title=\"再看看twitter的官网\"></a>再看看twitter的官网</h5><p><img src=\"http://d.pr/i/8GiH/twitter.png\"></p>\n<p><strong> 用的是伪元素:before </strong></p>\n<p></p><p data-height=\"174\" data-theme-id=\"0\" data-slug-hash=\"oxgyQE\" data-default-tab=\"result\" data-user=\"amanda111\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/amanda111/pen/oxgyQE/\" target=\"_blank\" rel=\"noopener\">oxgyQE</a> by AMANDA (<a href=\"http://codepen.io/amanda111\" target=\"_blank\" rel=\"noopener\">@amanda111</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n<hr>\n<p>更多的是<strong> 用设置background-image的方法 </strong>，设置background no-repeat，再给内容设一个合适的padding-left的值，就把background-image变到内容前面了。就有了小图标的赶脚。</p>\n<p></p><p data-height=\"219\" data-theme-id=\"0\" data-slug-hash=\"xVbWQQ\" data-default-tab=\"html\" data-user=\"amanda111\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/amanda111/pen/xVbWQQ/\" target=\"_blank\" rel=\"noopener\">xVbWQQ</a> by AMANDA (<a href=\"http://codepen.io/amanda111\" target=\"_blank\" rel=\"noopener\">@amanda111</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n<hr>\n<p>现在用<strong> list-style-image </strong></p>\n<p></p><p data-height=\"154\" data-theme-id=\"0\" data-slug-hash=\"pyvKdz\" data-default-tab=\"html\" data-user=\"amanda111\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/amanda111/pen/pyvKdz/\" target=\"_blank\" rel=\"noopener\">pyvKdz</a> by AMANDA (<a href=\"http://codepen.io/amanda111\" target=\"_blank\" rel=\"noopener\">@amanda111</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n<p>噢..发生了什么？用list-style-image插入小图标，发现image和内容之间有逼死强迫症的间距呀。<strong>而这个间距又是什么呢？</strong></p>\n<p>当不改变li标签样式的时，默认样式为list-style：disc。这时就可以看到实心点和内容的间距。这个间距应该是不能被改变的，是由浏览器决定的。所以，list-style-image 属性会有兼容性问题。</p>\n<p>想到要调整图片位置，就想到有 <em>list-style-position</em></p>\n<h4 id=\"so-what-is-list-style-position\"><a href=\"#so-what-is-list-style-position\" class=\"headerlink\" title=\"so what is list-style-position?\"></a>so what is list-style-position?</h4><blockquote>\n<p><strong>Initial values: </strong> outside</p>\n</blockquote>\n<blockquote>\n<p><strong> Values: </strong> inside/outside</p>\n</blockquote>\n<blockquote>\n<p><strong> Applies to: </strong> list-item</p>\n</blockquote>\n<p></p><p data-height=\"338\" data-theme-id=\"0\" data-slug-hash=\"aNzgxR\" data-default-tab=\"html\" data-user=\"amanda111\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/amanda111/pen/aNzgxR/\" target=\"_blank\" rel=\"noopener\">aNzgxR</a> by AMANDA (<a href=\"http://codepen.io/amanda111\" target=\"_blank\" rel=\"noopener\">@amanda111</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n<blockquote>\n<p><strong> outside: </strong>The marker box is outside the principal block box</p>\n</blockquote>\n<blockquote>\n<p><strong> inside: </strong>The marker box is the first inline box in the principal block box, after which the element’s content flows.</p>\n</blockquote>\n<p>就只有这两个value。所以..它并不能解决marker与内容的间距问题。但是，如果list-style-position有控制间距的value。</p>\n<h3 id=\"Actually，list-style-image-is-just-fine\"><a href=\"#Actually，list-style-image-is-just-fine\" class=\"headerlink\" title=\"Actually，list-style-image is just fine.\"></a>Actually，list-style-image is just fine.</h3><hr>\n<p><em>[Reference Documentation]</em></p>\n<p>[1]<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/list-style\" target=\"_blank\" rel=\"noopener\">MDN list-style</a></p>\n"},{"title":"Yet Another JavaScript Bridge","date":"2017-04-06T15:47:44.000Z","_content":"\n# 什么是JSBridge\n\n在Hybrid App中，关键的部分是Native和Web的交互。JSBridge就是用来建立通信机制的。通过JSBridge，Native可以调用JS的本地方法，Web调用会被Native捕获的方法，最终实现通信。\n\n下面介绍我们封装的一个JSBridge。来看一下它的API及其用法\n\n----\n\n# API及其用法\n\n## 一、YAJB初始化\n\n初始化一个YAJB实例\n\n**用法**\n\n```\nnpm install yajb-js\n```\n\n```\nvar YAJB = require('yajb-js');\nvar yajb = new YAJB()\n```\n\n**API**\n\n初始化实际上做了三件事情。首先是初始化一个事件队列，然后判断是在Android还是iOS平台，最后保存WebView初始化传入的data。\n\n```\nvar YAJB = function(){\n    // init evnetQueue\n\tthis.eventQueue = []\n\tthis.counter = 1\n\t......\n\t// get global options\n\tif (window.javaInterface) {\n        options = JSON.parse(window.javaInterface.toString())\n        this.isAndroid = true\n    }else if (window.YAJB_INJECT){\n        options = window.YAJB_INJECT\n        this.isiOS = true\n    }\n    ......\n\t// store data\n\tthis.platform = options.platform\n\tthis.data = options.data\n\t// store instance\n\twindow.YAJB_INSTANCE = this \n}\n```\n\n## 二、本地调用的方法\n\n### YAJB.send()\n\n**用法**\n\nyajb.send()中可以传入的参数有事件名和data，另外还可以定义一个函数。该函数将会在Native触发该事件之后被调用，可接收Native返回的值。\n\n```\nyajb.send(\"${eventName}\", data).then(function(val){\n\tconsole.log(val)\t\n}) \n```\n\n**API**\n\nyajb.send()做的事情是，通过`YAJB._send`将事件名、事件id和data发送给Native，并将`event + “Resolved”`的事件加入事件队列\n\n（YAJB默认当Native触发该事件后返回的事件的事件名为`event + \"Resolved\"`）\n\n这里利用了Promise，主要是为了用户可以通过Promise resolve function自定义执行成功的callback。当Native触发`event + “Resolved”`的事件时，就会传入参数并执行callback，`Promise resolve()`在此时也被调用。\n\n```\nYAJB.prototype.send = function(event, data) {\n\tvar that = this;\n\treturn new Promise(function(resolve, reject){\n\t\tthat.eventQueue.push({\n\t\t\tevent: event + \"Resolved\",\n\t\t\tid : that.counter,\n\t\t\tcallback: function(value){\n\t\t\t\tconsole.log(\"resolve\")\n\t\t\t\tresolve(value)\n\t\t\t}\n\t\t})\n\t\tthat._send({event:event,id:that.counter,data:JSON.stringify(data)});\n\t\tthat.counter++\n\t})\n}\n```\n\n### YAJB._send()\n\n上面提到了`YAJB._send`的作用是是将事件名，事件id和data发送给Native。那它具体是怎样实现的呢？\n\n**API**\n\n```\nYAJB.prototype._send = function(option) {\n\tif (this.isAndroid) {\n\t\twindow.location = \"hybrid://\" + option.event + ':' + option.id + '/'+ option.data\n\t}else if (this.isiOS) {\n\t\t// window.postMessage\n\t}\n}\n```\n\n可以看到，YAJB用的是URL scheme。我们约定的URL协议是`hybrid://${eventName}:${eventid}/${data}`。当我们更改URL时，Native将会捕获该动作，并解析URL。如果该URL符合约定的协议，则不进行跳转。以此实现向Native发送消息。\n\n\n### YAJB.register()\n\n**用法**\n\n本地先注册一个事件，等待Native触发。\n\nYAJB.register()需要传入事件名和Native触发该事件之后需要执行的回调函数。该回调函数第一个参数为Native返回的data，第二个参数为返回event Resolved事件给Native的函数\n\n```\nyajb.register(\"emit\", function(data,fn){\n    console.log(data)\n    var result = data + \"haha\"\n    fn(result)\n})\n```\n\n**API**\n\n这里register做的事情很简单，只是把事件推到事件队列中。\n\n```\nYAJB.prototype.register = function(event,fn){\n\tthis.eventQueue.push({\n\t\tevent: event,\n\t\tcallback: fn\n\t})\n}\n```\n\n接下来会具体介绍，Native触发已注册事件时所调用的`_trigger`方法\n\n## 三、提供给Native调用的方法\n\n### YAJB._emit()\n\n**用法**\n\n上文介绍`YAJB.send()`的时候说到，Web通过send方法向Native发送该事件及其data，Native接收并解析了之后，返回事件名为`${event}Resolved`的事件。\n\nNative通过调用本地的_emit()，返回`${event}Resolved`事件。\n\n**API**\n\n返回的option有`{${event}Resolved,eventid,data}`\n\n```\nYAJB.prototype._emit = function(option){\n\tvar opt = JSON.parse(option)\n    this.checkQueue(opt)\n}\n```\n\n接下来到事件队列中通过id找到`${event}Resolve`事件，执行回调函数\n\n```\nYAJB.prototype.checkQueue = function(option){\n\tvar event = this.eventQueue.find(function(item){\n\t\treturn item.id == option.id\n\t})\n\tevent.callback(option.data)\n}\n```\n\n### YAJB._trigger()\n\n**用法**\n\n当Native调用_trigger的同时，传入事件名，事件id和data。根据事件名从事件队列中找出之前注册过的事件，传入Native返回的data并执行callback。如果在callback中还传入了第二个参数(如：yajb.register用法示例的`fn`)，则会给Native发送`${event}Resolved`的响应事件。\n\n**API**\n\n```\nYAJB.prototype._trigger = function(option){\n\tvar opt = JSON.parse(option)\n\tvar event = this.eventQueue.find(function(item){\n\t\treturn item.event === opt.event\n\t})\n\tvar that = this\n\tevent.id = opt.id\n\tevent.callback(opt.data,function(result){\n\t\tvar op = {event: opt.event + 'Resolved',data:result,id:opt.id};\n\t\tthat._send(op);\n\t})\n}\n```\n\n\n\n\n","source":"_posts/Yet-Another-JavaScript-Bridge.md","raw":"---\ntitle: Yet Another JavaScript Bridge\ndate: 2017-04-06 23:47:44\ntags:\n---\n\n# 什么是JSBridge\n\n在Hybrid App中，关键的部分是Native和Web的交互。JSBridge就是用来建立通信机制的。通过JSBridge，Native可以调用JS的本地方法，Web调用会被Native捕获的方法，最终实现通信。\n\n下面介绍我们封装的一个JSBridge。来看一下它的API及其用法\n\n----\n\n# API及其用法\n\n## 一、YAJB初始化\n\n初始化一个YAJB实例\n\n**用法**\n\n```\nnpm install yajb-js\n```\n\n```\nvar YAJB = require('yajb-js');\nvar yajb = new YAJB()\n```\n\n**API**\n\n初始化实际上做了三件事情。首先是初始化一个事件队列，然后判断是在Android还是iOS平台，最后保存WebView初始化传入的data。\n\n```\nvar YAJB = function(){\n    // init evnetQueue\n\tthis.eventQueue = []\n\tthis.counter = 1\n\t......\n\t// get global options\n\tif (window.javaInterface) {\n        options = JSON.parse(window.javaInterface.toString())\n        this.isAndroid = true\n    }else if (window.YAJB_INJECT){\n        options = window.YAJB_INJECT\n        this.isiOS = true\n    }\n    ......\n\t// store data\n\tthis.platform = options.platform\n\tthis.data = options.data\n\t// store instance\n\twindow.YAJB_INSTANCE = this \n}\n```\n\n## 二、本地调用的方法\n\n### YAJB.send()\n\n**用法**\n\nyajb.send()中可以传入的参数有事件名和data，另外还可以定义一个函数。该函数将会在Native触发该事件之后被调用，可接收Native返回的值。\n\n```\nyajb.send(\"${eventName}\", data).then(function(val){\n\tconsole.log(val)\t\n}) \n```\n\n**API**\n\nyajb.send()做的事情是，通过`YAJB._send`将事件名、事件id和data发送给Native，并将`event + “Resolved”`的事件加入事件队列\n\n（YAJB默认当Native触发该事件后返回的事件的事件名为`event + \"Resolved\"`）\n\n这里利用了Promise，主要是为了用户可以通过Promise resolve function自定义执行成功的callback。当Native触发`event + “Resolved”`的事件时，就会传入参数并执行callback，`Promise resolve()`在此时也被调用。\n\n```\nYAJB.prototype.send = function(event, data) {\n\tvar that = this;\n\treturn new Promise(function(resolve, reject){\n\t\tthat.eventQueue.push({\n\t\t\tevent: event + \"Resolved\",\n\t\t\tid : that.counter,\n\t\t\tcallback: function(value){\n\t\t\t\tconsole.log(\"resolve\")\n\t\t\t\tresolve(value)\n\t\t\t}\n\t\t})\n\t\tthat._send({event:event,id:that.counter,data:JSON.stringify(data)});\n\t\tthat.counter++\n\t})\n}\n```\n\n### YAJB._send()\n\n上面提到了`YAJB._send`的作用是是将事件名，事件id和data发送给Native。那它具体是怎样实现的呢？\n\n**API**\n\n```\nYAJB.prototype._send = function(option) {\n\tif (this.isAndroid) {\n\t\twindow.location = \"hybrid://\" + option.event + ':' + option.id + '/'+ option.data\n\t}else if (this.isiOS) {\n\t\t// window.postMessage\n\t}\n}\n```\n\n可以看到，YAJB用的是URL scheme。我们约定的URL协议是`hybrid://${eventName}:${eventid}/${data}`。当我们更改URL时，Native将会捕获该动作，并解析URL。如果该URL符合约定的协议，则不进行跳转。以此实现向Native发送消息。\n\n\n### YAJB.register()\n\n**用法**\n\n本地先注册一个事件，等待Native触发。\n\nYAJB.register()需要传入事件名和Native触发该事件之后需要执行的回调函数。该回调函数第一个参数为Native返回的data，第二个参数为返回event Resolved事件给Native的函数\n\n```\nyajb.register(\"emit\", function(data,fn){\n    console.log(data)\n    var result = data + \"haha\"\n    fn(result)\n})\n```\n\n**API**\n\n这里register做的事情很简单，只是把事件推到事件队列中。\n\n```\nYAJB.prototype.register = function(event,fn){\n\tthis.eventQueue.push({\n\t\tevent: event,\n\t\tcallback: fn\n\t})\n}\n```\n\n接下来会具体介绍，Native触发已注册事件时所调用的`_trigger`方法\n\n## 三、提供给Native调用的方法\n\n### YAJB._emit()\n\n**用法**\n\n上文介绍`YAJB.send()`的时候说到，Web通过send方法向Native发送该事件及其data，Native接收并解析了之后，返回事件名为`${event}Resolved`的事件。\n\nNative通过调用本地的_emit()，返回`${event}Resolved`事件。\n\n**API**\n\n返回的option有`{${event}Resolved,eventid,data}`\n\n```\nYAJB.prototype._emit = function(option){\n\tvar opt = JSON.parse(option)\n    this.checkQueue(opt)\n}\n```\n\n接下来到事件队列中通过id找到`${event}Resolve`事件，执行回调函数\n\n```\nYAJB.prototype.checkQueue = function(option){\n\tvar event = this.eventQueue.find(function(item){\n\t\treturn item.id == option.id\n\t})\n\tevent.callback(option.data)\n}\n```\n\n### YAJB._trigger()\n\n**用法**\n\n当Native调用_trigger的同时，传入事件名，事件id和data。根据事件名从事件队列中找出之前注册过的事件，传入Native返回的data并执行callback。如果在callback中还传入了第二个参数(如：yajb.register用法示例的`fn`)，则会给Native发送`${event}Resolved`的响应事件。\n\n**API**\n\n```\nYAJB.prototype._trigger = function(option){\n\tvar opt = JSON.parse(option)\n\tvar event = this.eventQueue.find(function(item){\n\t\treturn item.event === opt.event\n\t})\n\tvar that = this\n\tevent.id = opt.id\n\tevent.callback(opt.data,function(result){\n\t\tvar op = {event: opt.event + 'Resolved',data:result,id:opt.id};\n\t\tthat._send(op);\n\t})\n}\n```\n\n\n\n\n","slug":"Yet-Another-JavaScript-Bridge","published":1,"updated":"2017-04-06T16:00:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwg4o3t800026v6kig4r1il6","content":"<h1 id=\"什么是JSBridge\"><a href=\"#什么是JSBridge\" class=\"headerlink\" title=\"什么是JSBridge\"></a>什么是JSBridge</h1><p>在Hybrid App中，关键的部分是Native和Web的交互。JSBridge就是用来建立通信机制的。通过JSBridge，Native可以调用JS的本地方法，Web调用会被Native捕获的方法，最终实现通信。</p>\n<p>下面介绍我们封装的一个JSBridge。来看一下它的API及其用法</p>\n<hr>\n<h1 id=\"API及其用法\"><a href=\"#API及其用法\" class=\"headerlink\" title=\"API及其用法\"></a>API及其用法</h1><h2 id=\"一、YAJB初始化\"><a href=\"#一、YAJB初始化\" class=\"headerlink\" title=\"一、YAJB初始化\"></a>一、YAJB初始化</h2><p>初始化一个YAJB实例</p>\n<p><strong>用法</strong></p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> yajb-js</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> YAJB = require(<span class=\"string\">'yajb-js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> yajb = <span class=\"keyword\">new</span> <span class=\"type\">YAJB</span>()</span><br></pre></td></tr></table></figure>\n<p><strong>API</strong></p>\n<p>初始化实际上做了三件事情。首先是初始化一个事件队列，然后判断是在Android还是iOS平台，最后保存WebView初始化传入的data。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> YAJB = function()&#123;</span><br><span class=\"line\">    <span class=\"comment\">// init evnetQueue</span></span><br><span class=\"line\">\tthis<span class=\"selector-class\">.eventQueue</span> = []</span><br><span class=\"line\">\tthis<span class=\"selector-class\">.counter</span> = <span class=\"number\">1</span></span><br><span class=\"line\">\t......</span><br><span class=\"line\">\t<span class=\"comment\">// get global options</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (window.javaInterface) &#123;</span><br><span class=\"line\">        options = JSON.parse(window<span class=\"selector-class\">.javaInterface</span><span class=\"selector-class\">.toString</span>())</span><br><span class=\"line\">        this<span class=\"selector-class\">.isAndroid</span> = true</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (window.YAJB_INJECT)&#123;</span><br><span class=\"line\">        options = window.YAJB_INJECT</span><br><span class=\"line\">        this<span class=\"selector-class\">.isiOS</span> = true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">\t<span class=\"comment\">// store data</span></span><br><span class=\"line\">\tthis<span class=\"selector-class\">.platform</span> = options.platform</span><br><span class=\"line\">\tthis<span class=\"selector-class\">.data</span> = options.data</span><br><span class=\"line\">\t<span class=\"comment\">// store instance</span></span><br><span class=\"line\">\twindow<span class=\"selector-class\">.YAJB_INSTANCE</span> = this </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、本地调用的方法\"><a href=\"#二、本地调用的方法\" class=\"headerlink\" title=\"二、本地调用的方法\"></a>二、本地调用的方法</h2><h3 id=\"YAJB-send\"><a href=\"#YAJB-send\" class=\"headerlink\" title=\"YAJB.send()\"></a>YAJB.send()</h3><p><strong>用法</strong></p>\n<p>yajb.send()中可以传入的参数有事件名和data，另外还可以定义一个函数。该函数将会在Native触发该事件之后被调用，可接收Native返回的值。</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yajb.send(<span class=\"string\">\"$&#123;eventName&#125;\"</span>, <span class=\"keyword\">data</span>).<span class=\"keyword\">then</span>(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(val)</span></span>&#123;</span><br><span class=\"line\">\tconsole.<span class=\"built_in\">log</span>(val)\t</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>API</strong></p>\n<p>yajb.send()做的事情是，通过<code>YAJB._send</code>将事件名、事件id和data发送给Native，并将<code>event + “Resolved”</code>的事件加入事件队列</p>\n<p>（YAJB默认当Native触发该事件后返回的事件的事件名为<code>event + &quot;Resolved&quot;</code>）</p>\n<p>这里利用了Promise，主要是为了用户可以通过Promise resolve function自定义执行成功的callback。当Native触发<code>event + “Resolved”</code>的事件时，就会传入参数并执行callback，<code>Promise resolve()</code>在此时也被调用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YAJB.prototype.send = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event, data</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">\t\tthat.eventQueue.push(&#123;</span><br><span class=\"line\">\t\t\tevent: event + <span class=\"string\">\"Resolved\"</span>,</span><br><span class=\"line\">\t\t\tid : that.counter,</span><br><span class=\"line\">\t\t\tcallback: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"resolve\"</span>)</span><br><span class=\"line\">\t\t\t\tresolve(value)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t\tthat._send(&#123;<span class=\"attr\">event</span>:event,<span class=\"attr\">id</span>:that.counter,<span class=\"attr\">data</span>:<span class=\"built_in\">JSON</span>.stringify(data)&#125;);</span><br><span class=\"line\">\t\tthat.counter++</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"YAJB-send-1\"><a href=\"#YAJB-send-1\" class=\"headerlink\" title=\"YAJB._send()\"></a>YAJB._send()</h3><p>上面提到了<code>YAJB._send</code>的作用是是将事件名，事件id和data发送给Native。那它具体是怎样实现的呢？</p>\n<p><strong>API</strong></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YAJB<span class=\"selector-class\">.prototype</span>._send = function(option) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (this.isAndroid) &#123;</span><br><span class=\"line\">\t\twindow<span class=\"selector-class\">.location</span> = <span class=\"string\">\"hybrid://\"</span> + option<span class=\"selector-class\">.event</span> + <span class=\"string\">':'</span> + option<span class=\"selector-class\">.id</span> + <span class=\"string\">'/'</span>+ option.data</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (this.isiOS) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// window.postMessage</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，YAJB用的是URL scheme。我们约定的URL协议是<code>hybrid://${eventName}:${eventid}/${data}</code>。当我们更改URL时，Native将会捕获该动作，并解析URL。如果该URL符合约定的协议，则不进行跳转。以此实现向Native发送消息。</p>\n<h3 id=\"YAJB-register\"><a href=\"#YAJB-register\" class=\"headerlink\" title=\"YAJB.register()\"></a>YAJB.register()</h3><p><strong>用法</strong></p>\n<p>本地先注册一个事件，等待Native触发。</p>\n<p>YAJB.register()需要传入事件名和Native触发该事件之后需要执行的回调函数。该回调函数第一个参数为Native返回的data，第二个参数为返回event Resolved事件给Native的函数</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">yajb.register</span>(<span class=\"string\">\"emit\"</span>, <span class=\"meta\">function</span>(<span class=\"meta\">data</span>,<span class=\"meta\">fn</span>)&#123;</span><br><span class=\"line\">    console.log(<span class=\"meta\">data</span>)</span><br><span class=\"line\">    var result = <span class=\"meta\">data</span> + <span class=\"string\">\"haha\"</span></span><br><span class=\"line\">    <span class=\"meta\">fn</span>(result)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>API</strong></p>\n<p>这里register做的事情很简单，只是把事件推到事件队列中。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YAJB<span class=\"selector-class\">.prototype</span><span class=\"selector-class\">.register</span> = function(event,fn)&#123;</span><br><span class=\"line\">\tthis<span class=\"selector-class\">.eventQueue</span><span class=\"selector-class\">.push</span>(&#123;</span><br><span class=\"line\">\t\tevent: event,</span><br><span class=\"line\">\t\tcallback: fn</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来会具体介绍，Native触发已注册事件时所调用的<code>_trigger</code>方法</p>\n<h2 id=\"三、提供给Native调用的方法\"><a href=\"#三、提供给Native调用的方法\" class=\"headerlink\" title=\"三、提供给Native调用的方法\"></a>三、提供给Native调用的方法</h2><h3 id=\"YAJB-emit\"><a href=\"#YAJB-emit\" class=\"headerlink\" title=\"YAJB._emit()\"></a>YAJB._emit()</h3><p><strong>用法</strong></p>\n<p>上文介绍<code>YAJB.send()</code>的时候说到，Web通过send方法向Native发送该事件及其data，Native接收并解析了之后，返回事件名为<code>${event}Resolved</code>的事件。</p>\n<p>Native通过调用本地的_emit()，返回<code>${event}Resolved</code>事件。</p>\n<p><strong>API</strong></p>\n<p>返回的option有<code>{${event}Resolved,eventid,data}</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YAJB.prototype._emit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">option</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> opt = <span class=\"built_in\">JSON</span>.parse(option)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.checkQueue(opt)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来到事件队列中通过id找到<code>${event}Resolve</code>事件，执行回调函数</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YAJB<span class=\"selector-class\">.prototype</span><span class=\"selector-class\">.checkQueue</span> = function(option)&#123;</span><br><span class=\"line\">\t<span class=\"selector-tag\">var</span> event = this<span class=\"selector-class\">.eventQueue</span><span class=\"selector-class\">.find</span>(function(item)&#123;</span><br><span class=\"line\">\t\treturn item<span class=\"selector-class\">.id</span> == option.id</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tevent.callback(option.data)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"YAJB-trigger\"><a href=\"#YAJB-trigger\" class=\"headerlink\" title=\"YAJB._trigger()\"></a>YAJB._trigger()</h3><p><strong>用法</strong></p>\n<p>当Native调用_trigger的同时，传入事件名，事件id和data。根据事件名从事件队列中找出之前注册过的事件，传入Native返回的data并执行callback。如果在callback中还传入了第二个参数(如：yajb.register用法示例的<code>fn</code>)，则会给Native发送<code>${event}Resolved</code>的响应事件。</p>\n<p><strong>API</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YAJB.prototype._trigger = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">option</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> opt = <span class=\"built_in\">JSON</span>.parse(option)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> event = <span class=\"keyword\">this</span>.eventQueue.find(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> item.event === opt.event</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span></span><br><span class=\"line\">\tevent.id = opt.id</span><br><span class=\"line\">\tevent.callback(opt.data,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> op = &#123;<span class=\"attr\">event</span>: opt.event + <span class=\"string\">'Resolved'</span>,<span class=\"attr\">data</span>:result,<span class=\"attr\">id</span>:opt.id&#125;;</span><br><span class=\"line\">\t\tthat._send(op);</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"什么是JSBridge\"><a href=\"#什么是JSBridge\" class=\"headerlink\" title=\"什么是JSBridge\"></a>什么是JSBridge</h1><p>在Hybrid App中，关键的部分是Native和Web的交互。JSBridge就是用来建立通信机制的。通过JSBridge，Native可以调用JS的本地方法，Web调用会被Native捕获的方法，最终实现通信。</p>\n<p>下面介绍我们封装的一个JSBridge。来看一下它的API及其用法</p>\n<hr>\n<h1 id=\"API及其用法\"><a href=\"#API及其用法\" class=\"headerlink\" title=\"API及其用法\"></a>API及其用法</h1><h2 id=\"一、YAJB初始化\"><a href=\"#一、YAJB初始化\" class=\"headerlink\" title=\"一、YAJB初始化\"></a>一、YAJB初始化</h2><p>初始化一个YAJB实例</p>\n<p><strong>用法</strong></p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> yajb-js</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> YAJB = require(<span class=\"string\">'yajb-js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> yajb = <span class=\"keyword\">new</span> <span class=\"type\">YAJB</span>()</span><br></pre></td></tr></table></figure>\n<p><strong>API</strong></p>\n<p>初始化实际上做了三件事情。首先是初始化一个事件队列，然后判断是在Android还是iOS平台，最后保存WebView初始化传入的data。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> YAJB = function()&#123;</span><br><span class=\"line\">    <span class=\"comment\">// init evnetQueue</span></span><br><span class=\"line\">\tthis<span class=\"selector-class\">.eventQueue</span> = []</span><br><span class=\"line\">\tthis<span class=\"selector-class\">.counter</span> = <span class=\"number\">1</span></span><br><span class=\"line\">\t......</span><br><span class=\"line\">\t<span class=\"comment\">// get global options</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (window.javaInterface) &#123;</span><br><span class=\"line\">        options = JSON.parse(window<span class=\"selector-class\">.javaInterface</span><span class=\"selector-class\">.toString</span>())</span><br><span class=\"line\">        this<span class=\"selector-class\">.isAndroid</span> = true</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (window.YAJB_INJECT)&#123;</span><br><span class=\"line\">        options = window.YAJB_INJECT</span><br><span class=\"line\">        this<span class=\"selector-class\">.isiOS</span> = true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">\t<span class=\"comment\">// store data</span></span><br><span class=\"line\">\tthis<span class=\"selector-class\">.platform</span> = options.platform</span><br><span class=\"line\">\tthis<span class=\"selector-class\">.data</span> = options.data</span><br><span class=\"line\">\t<span class=\"comment\">// store instance</span></span><br><span class=\"line\">\twindow<span class=\"selector-class\">.YAJB_INSTANCE</span> = this </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、本地调用的方法\"><a href=\"#二、本地调用的方法\" class=\"headerlink\" title=\"二、本地调用的方法\"></a>二、本地调用的方法</h2><h3 id=\"YAJB-send\"><a href=\"#YAJB-send\" class=\"headerlink\" title=\"YAJB.send()\"></a>YAJB.send()</h3><p><strong>用法</strong></p>\n<p>yajb.send()中可以传入的参数有事件名和data，另外还可以定义一个函数。该函数将会在Native触发该事件之后被调用，可接收Native返回的值。</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yajb.send(<span class=\"string\">\"$&#123;eventName&#125;\"</span>, <span class=\"keyword\">data</span>).<span class=\"keyword\">then</span>(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(val)</span></span>&#123;</span><br><span class=\"line\">\tconsole.<span class=\"built_in\">log</span>(val)\t</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>API</strong></p>\n<p>yajb.send()做的事情是，通过<code>YAJB._send</code>将事件名、事件id和data发送给Native，并将<code>event + “Resolved”</code>的事件加入事件队列</p>\n<p>（YAJB默认当Native触发该事件后返回的事件的事件名为<code>event + &quot;Resolved&quot;</code>）</p>\n<p>这里利用了Promise，主要是为了用户可以通过Promise resolve function自定义执行成功的callback。当Native触发<code>event + “Resolved”</code>的事件时，就会传入参数并执行callback，<code>Promise resolve()</code>在此时也被调用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YAJB.prototype.send = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event, data</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">\t\tthat.eventQueue.push(&#123;</span><br><span class=\"line\">\t\t\tevent: event + <span class=\"string\">\"Resolved\"</span>,</span><br><span class=\"line\">\t\t\tid : that.counter,</span><br><span class=\"line\">\t\t\tcallback: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"resolve\"</span>)</span><br><span class=\"line\">\t\t\t\tresolve(value)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t\tthat._send(&#123;<span class=\"attr\">event</span>:event,<span class=\"attr\">id</span>:that.counter,<span class=\"attr\">data</span>:<span class=\"built_in\">JSON</span>.stringify(data)&#125;);</span><br><span class=\"line\">\t\tthat.counter++</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"YAJB-send-1\"><a href=\"#YAJB-send-1\" class=\"headerlink\" title=\"YAJB._send()\"></a>YAJB._send()</h3><p>上面提到了<code>YAJB._send</code>的作用是是将事件名，事件id和data发送给Native。那它具体是怎样实现的呢？</p>\n<p><strong>API</strong></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YAJB<span class=\"selector-class\">.prototype</span>._send = function(option) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (this.isAndroid) &#123;</span><br><span class=\"line\">\t\twindow<span class=\"selector-class\">.location</span> = <span class=\"string\">\"hybrid://\"</span> + option<span class=\"selector-class\">.event</span> + <span class=\"string\">':'</span> + option<span class=\"selector-class\">.id</span> + <span class=\"string\">'/'</span>+ option.data</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (this.isiOS) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// window.postMessage</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，YAJB用的是URL scheme。我们约定的URL协议是<code>hybrid://${eventName}:${eventid}/${data}</code>。当我们更改URL时，Native将会捕获该动作，并解析URL。如果该URL符合约定的协议，则不进行跳转。以此实现向Native发送消息。</p>\n<h3 id=\"YAJB-register\"><a href=\"#YAJB-register\" class=\"headerlink\" title=\"YAJB.register()\"></a>YAJB.register()</h3><p><strong>用法</strong></p>\n<p>本地先注册一个事件，等待Native触发。</p>\n<p>YAJB.register()需要传入事件名和Native触发该事件之后需要执行的回调函数。该回调函数第一个参数为Native返回的data，第二个参数为返回event Resolved事件给Native的函数</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">yajb.register</span>(<span class=\"string\">\"emit\"</span>, <span class=\"meta\">function</span>(<span class=\"meta\">data</span>,<span class=\"meta\">fn</span>)&#123;</span><br><span class=\"line\">    console.log(<span class=\"meta\">data</span>)</span><br><span class=\"line\">    var result = <span class=\"meta\">data</span> + <span class=\"string\">\"haha\"</span></span><br><span class=\"line\">    <span class=\"meta\">fn</span>(result)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>API</strong></p>\n<p>这里register做的事情很简单，只是把事件推到事件队列中。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YAJB<span class=\"selector-class\">.prototype</span><span class=\"selector-class\">.register</span> = function(event,fn)&#123;</span><br><span class=\"line\">\tthis<span class=\"selector-class\">.eventQueue</span><span class=\"selector-class\">.push</span>(&#123;</span><br><span class=\"line\">\t\tevent: event,</span><br><span class=\"line\">\t\tcallback: fn</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来会具体介绍，Native触发已注册事件时所调用的<code>_trigger</code>方法</p>\n<h2 id=\"三、提供给Native调用的方法\"><a href=\"#三、提供给Native调用的方法\" class=\"headerlink\" title=\"三、提供给Native调用的方法\"></a>三、提供给Native调用的方法</h2><h3 id=\"YAJB-emit\"><a href=\"#YAJB-emit\" class=\"headerlink\" title=\"YAJB._emit()\"></a>YAJB._emit()</h3><p><strong>用法</strong></p>\n<p>上文介绍<code>YAJB.send()</code>的时候说到，Web通过send方法向Native发送该事件及其data，Native接收并解析了之后，返回事件名为<code>${event}Resolved</code>的事件。</p>\n<p>Native通过调用本地的_emit()，返回<code>${event}Resolved</code>事件。</p>\n<p><strong>API</strong></p>\n<p>返回的option有<code>{${event}Resolved,eventid,data}</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YAJB.prototype._emit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">option</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> opt = <span class=\"built_in\">JSON</span>.parse(option)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.checkQueue(opt)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来到事件队列中通过id找到<code>${event}Resolve</code>事件，执行回调函数</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YAJB<span class=\"selector-class\">.prototype</span><span class=\"selector-class\">.checkQueue</span> = function(option)&#123;</span><br><span class=\"line\">\t<span class=\"selector-tag\">var</span> event = this<span class=\"selector-class\">.eventQueue</span><span class=\"selector-class\">.find</span>(function(item)&#123;</span><br><span class=\"line\">\t\treturn item<span class=\"selector-class\">.id</span> == option.id</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tevent.callback(option.data)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"YAJB-trigger\"><a href=\"#YAJB-trigger\" class=\"headerlink\" title=\"YAJB._trigger()\"></a>YAJB._trigger()</h3><p><strong>用法</strong></p>\n<p>当Native调用_trigger的同时，传入事件名，事件id和data。根据事件名从事件队列中找出之前注册过的事件，传入Native返回的data并执行callback。如果在callback中还传入了第二个参数(如：yajb.register用法示例的<code>fn</code>)，则会给Native发送<code>${event}Resolved</code>的响应事件。</p>\n<p><strong>API</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YAJB.prototype._trigger = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">option</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> opt = <span class=\"built_in\">JSON</span>.parse(option)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> event = <span class=\"keyword\">this</span>.eventQueue.find(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> item.event === opt.event</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span></span><br><span class=\"line\">\tevent.id = opt.id</span><br><span class=\"line\">\tevent.callback(opt.data,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> op = &#123;<span class=\"attr\">event</span>: opt.event + <span class=\"string\">'Resolved'</span>,<span class=\"attr\">data</span>:result,<span class=\"attr\">id</span>:opt.id&#125;;</span><br><span class=\"line\">\t\tthat._send(op);</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"JS Modularity","date":"2016-03-17T04:36:20.000Z","_content":"\n## what is modularity？\n> JavaScript modules are encapsulated, meaning that they keep implementation details private, and expose a public API.\n\n**modules should be**\n\n> ***specialized:***  一个模块是专门解决一个问题的\n\n> ***independent:***  每个模块是独立的。模块之间由API连接\n\n> ***decomposable:*** 可分解\n\n> ***recomposable:*** 可组合\n\n> ***substitutable:*** 可被代替\n\n-------\n\n##  why modularity？\n*Code complexity grows. And modularity simplifies things!*\n\n**solution to name collision**\n\n当一个项目大起来的时候，js的代码也越来越多，不进行闭包或者模块化就会产生大量的全局变量，而造成了命名冲突。\n\n**safely  make change**\n\n在我们写一个app的时候，整个app可能由几个部分构成，且它们之间相互联系。在我们没有使每个部分模块化的情况下，对它们进行修改的时候还要考虑到它们对整体的影响。所以我们在进行修改之前，还要go through the whole program, 真是件吃力的事情。但如果把它们都模块化，就可以在这个模块里面直接修改，而不用担心它会对整个项目产生bad effect.\n\n同样，也不用担心修改其他的部分会影响到它.\n\n**reuse the modules**\n\n模块可以被重复使用，and its API should be clean\n\n**make the code more readable**\n\n也使代码的结构性更强。\n\n-------------------------\n\n### function\n*只能实现简单的封装。*\n\n\tvar math = {\n\t\tadd: function add(a,b){\n\t\t\treturn a + b\n\t\t},\n\t\tsub: function sub(a,b){\n\t\t\treturn a - b\n\t\t}\n\t}\n\tconsole.log(math.add(1,2));\n\tconsole.log(add(1,2));//add is undefined\n\n-----------------------\n\n### IIFE: Immediately-invoked Function Expression\n*能实现访问控制。*\n\n\tvar module =(function(){\n\t\tvar private = \"private\";\n\t\tvar foo = function(){\n\t\t\tconsole.log(private);\n\t\t}\n\t\treturn{\n\t\t\tfoo:foo\n\t\t}\n\t})();\n\tconsole.log(module.foo());\n\tconsole.log(module.private);//undefined\n\n--------------\n\nfunction和IIFE都没有依赖声明。\n\n**我们该怎么更好地模块化呢? **\n\n## CommonJS & AMD & ES6 \n\n-------\n\n### CommonJS\n**多用于server上。不适合浏览器使用，不能发送异步请求。同步require**\n\n\t//content of foo.js \n\t//先定义一个foo模块\n\tvar foo = function () {\n\t  return 'foo method result';\n\t};\n\t//再把foo模块暴露给其他模块\n\texports.method = foo\n\n\t//content of bar.js\n\tvar Foo = require('../foo');//声明依赖foo模块\n\tvar barMethod = function () {\n\t  return 'barMethod result';\n\t};\n\tvar fooMethod = function () {\n\t  return Foo.method();\n\t};\n\t//export \n\texports.barMethod = barMethod;\n\texports.fooMethod = fooMethod;\n\n\t//依赖bar.js 这个模块\n\tvar bar = require('bar');\n\tbar.barMethod();\n\tbar.fooMethod();\n\n----------\n### AMD (Asynchronous Module Definition)\n\nAMD里面模块是被**异步加载**的，加载完后就在缓存里。这能很好地**适应浏览器的环境**，因为这就不需要在每次加载应用时候，把所有的模块都重新加载一遍。而Commonjs，并不能做到这一点，所以说它不适合浏览器环境。\n\n因为AMD要require一个define过的模块，要立刻获取define模块的内容，所以可以看到**define{}里面的内容都要用return{}包起来**\n\nAMD还可以加载html，css文件\n\nIt should look like this\n\n\t// content of foo.js  define('module's name',function(){}) 定义模块foo\n\tdefine('foo',function(){\n\t\treturn{\n\t\t\tmethod: function(){\n\t\t\t\treturn \"foo method\"\n\t\t\t}\n\t\t}\n\t});\n\n\t//content of bar.js  define('module's name',['dependency'],function(){}) 定义依赖模块foo的模块bar\n\tdefine('bar',['foo'],function(){\n\t\treturn{\n\t\t\tbarMethod{\n\t\t\t\treturn \"bar method\"\n\t\t\t}\n\t\t\tfooMethod{\n\t\t\t\treturn foo.method();\n\t\t\t}\n\t\t}\n\t});\n\n\t//require(['dependency'],function(){}) 获取模块\n\trequire(['bar'],function(){\n\t\tbar.barMethod();\n\t  \tbar.fooMethod();\n\t})\n\n\n--------------\n\n### ES6\n\n#### HERE come the export and import keywords!\n\n**export**\n\n\texport var color = \"red\";\n\texport let name = \"Nicholas\";\n\texport const magicNumber = 7;\n\n\texport function sum(num1, num2) {\n\t    return num1 + num2;\n\t}\n\n\t//export later\n\tfunction multiply(num1, num2) {\n\t    return num1 * num2;\n\t}\n\texport multiply;\n\n**import{}**\n\n\timport {identifier1,identifier2,..} from \"file\"\n\n\t//import everything\n\timport * from \"file\"\n\n\n\n\n#### some rules we need to know\n\n+ 一切都\"use strict\"\n\n+ 只有被export了，才能在其他模块被引用。\n\n+ module的顶级作用域不能用this这个语句\n\n+ 需要给每个function和class起名字。但default可以有\n\n```\n\t//export  default\n\texport default function(num1, num2) {\n    \treturn num1 + num2;\n\t}\n\timport sum from \"example\"\n\tconsole.log(sum(1,2));//3\n```\n\n+ 可以rename\n\n```\n\tfunction sum(num1, num2) {\n\t    return num1 + num2;\n\t}\n\texport { sum as add };//在export里改\n\timport { sum as add } from \"example\"; //在import里改will do\n\n\tconsole.log(add(1,2));//3\n\tconsole.log(typeof sum)//undefined\n```\n***References***\n\n[1]<a href=\"https://leanpub.com/understandinges6/read/#leanpub-auto-modules\">Understanding ECMAScript6-Modules</a>\n\n[2]<a href=\"https://www.safaribooksonline.com/library/view/programming-javascript-applications/9781491950289/ch04.html\">Programming JavaScript Applications-Chapter 4. Modules</a>\n\n[3]<a href=\"https://www.safaribooksonline.com/library/view/eloquent-javascript-2nd/9781457189821/ch10.html\">Eloquent JavaScript Chapter10 Modules</a>\n\n[4]<a href=\"https://github.com/vasanthk/js-bits/blob/master/js/amd-commonjs-es6modules.js\">js-bits</a>\n","source":"_posts/modularity.md","raw":"title: JS Modularity\ndate: 2016-03-17 12:36:20\ntags: \n---\n\n## what is modularity？\n> JavaScript modules are encapsulated, meaning that they keep implementation details private, and expose a public API.\n\n**modules should be**\n\n> ***specialized:***  一个模块是专门解决一个问题的\n\n> ***independent:***  每个模块是独立的。模块之间由API连接\n\n> ***decomposable:*** 可分解\n\n> ***recomposable:*** 可组合\n\n> ***substitutable:*** 可被代替\n\n-------\n\n##  why modularity？\n*Code complexity grows. And modularity simplifies things!*\n\n**solution to name collision**\n\n当一个项目大起来的时候，js的代码也越来越多，不进行闭包或者模块化就会产生大量的全局变量，而造成了命名冲突。\n\n**safely  make change**\n\n在我们写一个app的时候，整个app可能由几个部分构成，且它们之间相互联系。在我们没有使每个部分模块化的情况下，对它们进行修改的时候还要考虑到它们对整体的影响。所以我们在进行修改之前，还要go through the whole program, 真是件吃力的事情。但如果把它们都模块化，就可以在这个模块里面直接修改，而不用担心它会对整个项目产生bad effect.\n\n同样，也不用担心修改其他的部分会影响到它.\n\n**reuse the modules**\n\n模块可以被重复使用，and its API should be clean\n\n**make the code more readable**\n\n也使代码的结构性更强。\n\n-------------------------\n\n### function\n*只能实现简单的封装。*\n\n\tvar math = {\n\t\tadd: function add(a,b){\n\t\t\treturn a + b\n\t\t},\n\t\tsub: function sub(a,b){\n\t\t\treturn a - b\n\t\t}\n\t}\n\tconsole.log(math.add(1,2));\n\tconsole.log(add(1,2));//add is undefined\n\n-----------------------\n\n### IIFE: Immediately-invoked Function Expression\n*能实现访问控制。*\n\n\tvar module =(function(){\n\t\tvar private = \"private\";\n\t\tvar foo = function(){\n\t\t\tconsole.log(private);\n\t\t}\n\t\treturn{\n\t\t\tfoo:foo\n\t\t}\n\t})();\n\tconsole.log(module.foo());\n\tconsole.log(module.private);//undefined\n\n--------------\n\nfunction和IIFE都没有依赖声明。\n\n**我们该怎么更好地模块化呢? **\n\n## CommonJS & AMD & ES6 \n\n-------\n\n### CommonJS\n**多用于server上。不适合浏览器使用，不能发送异步请求。同步require**\n\n\t//content of foo.js \n\t//先定义一个foo模块\n\tvar foo = function () {\n\t  return 'foo method result';\n\t};\n\t//再把foo模块暴露给其他模块\n\texports.method = foo\n\n\t//content of bar.js\n\tvar Foo = require('../foo');//声明依赖foo模块\n\tvar barMethod = function () {\n\t  return 'barMethod result';\n\t};\n\tvar fooMethod = function () {\n\t  return Foo.method();\n\t};\n\t//export \n\texports.barMethod = barMethod;\n\texports.fooMethod = fooMethod;\n\n\t//依赖bar.js 这个模块\n\tvar bar = require('bar');\n\tbar.barMethod();\n\tbar.fooMethod();\n\n----------\n### AMD (Asynchronous Module Definition)\n\nAMD里面模块是被**异步加载**的，加载完后就在缓存里。这能很好地**适应浏览器的环境**，因为这就不需要在每次加载应用时候，把所有的模块都重新加载一遍。而Commonjs，并不能做到这一点，所以说它不适合浏览器环境。\n\n因为AMD要require一个define过的模块，要立刻获取define模块的内容，所以可以看到**define{}里面的内容都要用return{}包起来**\n\nAMD还可以加载html，css文件\n\nIt should look like this\n\n\t// content of foo.js  define('module's name',function(){}) 定义模块foo\n\tdefine('foo',function(){\n\t\treturn{\n\t\t\tmethod: function(){\n\t\t\t\treturn \"foo method\"\n\t\t\t}\n\t\t}\n\t});\n\n\t//content of bar.js  define('module's name',['dependency'],function(){}) 定义依赖模块foo的模块bar\n\tdefine('bar',['foo'],function(){\n\t\treturn{\n\t\t\tbarMethod{\n\t\t\t\treturn \"bar method\"\n\t\t\t}\n\t\t\tfooMethod{\n\t\t\t\treturn foo.method();\n\t\t\t}\n\t\t}\n\t});\n\n\t//require(['dependency'],function(){}) 获取模块\n\trequire(['bar'],function(){\n\t\tbar.barMethod();\n\t  \tbar.fooMethod();\n\t})\n\n\n--------------\n\n### ES6\n\n#### HERE come the export and import keywords!\n\n**export**\n\n\texport var color = \"red\";\n\texport let name = \"Nicholas\";\n\texport const magicNumber = 7;\n\n\texport function sum(num1, num2) {\n\t    return num1 + num2;\n\t}\n\n\t//export later\n\tfunction multiply(num1, num2) {\n\t    return num1 * num2;\n\t}\n\texport multiply;\n\n**import{}**\n\n\timport {identifier1,identifier2,..} from \"file\"\n\n\t//import everything\n\timport * from \"file\"\n\n\n\n\n#### some rules we need to know\n\n+ 一切都\"use strict\"\n\n+ 只有被export了，才能在其他模块被引用。\n\n+ module的顶级作用域不能用this这个语句\n\n+ 需要给每个function和class起名字。但default可以有\n\n```\n\t//export  default\n\texport default function(num1, num2) {\n    \treturn num1 + num2;\n\t}\n\timport sum from \"example\"\n\tconsole.log(sum(1,2));//3\n```\n\n+ 可以rename\n\n```\n\tfunction sum(num1, num2) {\n\t    return num1 + num2;\n\t}\n\texport { sum as add };//在export里改\n\timport { sum as add } from \"example\"; //在import里改will do\n\n\tconsole.log(add(1,2));//3\n\tconsole.log(typeof sum)//undefined\n```\n***References***\n\n[1]<a href=\"https://leanpub.com/understandinges6/read/#leanpub-auto-modules\">Understanding ECMAScript6-Modules</a>\n\n[2]<a href=\"https://www.safaribooksonline.com/library/view/programming-javascript-applications/9781491950289/ch04.html\">Programming JavaScript Applications-Chapter 4. Modules</a>\n\n[3]<a href=\"https://www.safaribooksonline.com/library/view/eloquent-javascript-2nd/9781457189821/ch10.html\">Eloquent JavaScript Chapter10 Modules</a>\n\n[4]<a href=\"https://github.com/vasanthk/js-bits/blob/master/js/amd-commonjs-es6modules.js\">js-bits</a>\n","slug":"modularity","published":1,"updated":"2016-03-17T13:38:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwg4o3t900036v6k7fiuv70n","content":"<h2 id=\"what-is-modularity？\"><a href=\"#what-is-modularity？\" class=\"headerlink\" title=\"what is modularity？\"></a>what is modularity？</h2><blockquote>\n<p>JavaScript modules are encapsulated, meaning that they keep implementation details private, and expose a public API.</p>\n</blockquote>\n<p><strong>modules should be</strong></p>\n<blockquote>\n<p><strong><em>specialized:</em></strong>  一个模块是专门解决一个问题的</p>\n</blockquote>\n<blockquote>\n<p><strong><em>independent:</em></strong>  每个模块是独立的。模块之间由API连接</p>\n</blockquote>\n<blockquote>\n<p><strong><em>decomposable:</em></strong> 可分解</p>\n</blockquote>\n<blockquote>\n<p><strong><em>recomposable:</em></strong> 可组合</p>\n</blockquote>\n<blockquote>\n<p><strong><em>substitutable:</em></strong> 可被代替</p>\n</blockquote>\n<hr>\n<h2 id=\"why-modularity？\"><a href=\"#why-modularity？\" class=\"headerlink\" title=\"why modularity？\"></a>why modularity？</h2><p><em>Code complexity grows. And modularity simplifies things!</em></p>\n<p><strong>solution to name collision</strong></p>\n<p>当一个项目大起来的时候，js的代码也越来越多，不进行闭包或者模块化就会产生大量的全局变量，而造成了命名冲突。</p>\n<p><strong>safely  make change</strong></p>\n<p>在我们写一个app的时候，整个app可能由几个部分构成，且它们之间相互联系。在我们没有使每个部分模块化的情况下，对它们进行修改的时候还要考虑到它们对整体的影响。所以我们在进行修改之前，还要go through the whole program, 真是件吃力的事情。但如果把它们都模块化，就可以在这个模块里面直接修改，而不用担心它会对整个项目产生bad effect.</p>\n<p>同样，也不用担心修改其他的部分会影响到它.</p>\n<p><strong>reuse the modules</strong></p>\n<p>模块可以被重复使用，and its API should be clean</p>\n<p><strong>make the code more readable</strong></p>\n<p>也使代码的结构性更强。</p>\n<hr>\n<h3 id=\"function\"><a href=\"#function\" class=\"headerlink\" title=\"function\"></a>function</h3><p><em>只能实现简单的封装。</em></p>\n<pre><code>var math = {\n    add: function add(a,b){\n        return a + b\n    },\n    sub: function sub(a,b){\n        return a - b\n    }\n}\nconsole.log(math.add(1,2));\nconsole.log(add(1,2));//add is undefined\n</code></pre><hr>\n<h3 id=\"IIFE-Immediately-invoked-Function-Expression\"><a href=\"#IIFE-Immediately-invoked-Function-Expression\" class=\"headerlink\" title=\"IIFE: Immediately-invoked Function Expression\"></a>IIFE: Immediately-invoked Function Expression</h3><p><em>能实现访问控制。</em></p>\n<pre><code>var module =(function(){\n    var private = &quot;private&quot;;\n    var foo = function(){\n        console.log(private);\n    }\n    return{\n        foo:foo\n    }\n})();\nconsole.log(module.foo());\nconsole.log(module.private);//undefined\n</code></pre><hr>\n<p>function和IIFE都没有依赖声明。</p>\n<p><strong>我们该怎么更好地模块化呢? </strong></p>\n<h2 id=\"CommonJS-amp-AMD-amp-ES6\"><a href=\"#CommonJS-amp-AMD-amp-ES6\" class=\"headerlink\" title=\"CommonJS &amp; AMD &amp; ES6\"></a>CommonJS &amp; AMD &amp; ES6</h2><hr>\n<h3 id=\"CommonJS\"><a href=\"#CommonJS\" class=\"headerlink\" title=\"CommonJS\"></a>CommonJS</h3><p><strong>多用于server上。不适合浏览器使用，不能发送异步请求。同步require</strong></p>\n<pre><code>//content of foo.js \n//先定义一个foo模块\nvar foo = function () {\n  return &apos;foo method result&apos;;\n};\n//再把foo模块暴露给其他模块\nexports.method = foo\n\n//content of bar.js\nvar Foo = require(&apos;../foo&apos;);//声明依赖foo模块\nvar barMethod = function () {\n  return &apos;barMethod result&apos;;\n};\nvar fooMethod = function () {\n  return Foo.method();\n};\n//export \nexports.barMethod = barMethod;\nexports.fooMethod = fooMethod;\n\n//依赖bar.js 这个模块\nvar bar = require(&apos;bar&apos;);\nbar.barMethod();\nbar.fooMethod();\n</code></pre><hr>\n<h3 id=\"AMD-Asynchronous-Module-Definition\"><a href=\"#AMD-Asynchronous-Module-Definition\" class=\"headerlink\" title=\"AMD (Asynchronous Module Definition)\"></a>AMD (Asynchronous Module Definition)</h3><p>AMD里面模块是被<strong>异步加载</strong>的，加载完后就在缓存里。这能很好地<strong>适应浏览器的环境</strong>，因为这就不需要在每次加载应用时候，把所有的模块都重新加载一遍。而Commonjs，并不能做到这一点，所以说它不适合浏览器环境。</p>\n<p>因为AMD要require一个define过的模块，要立刻获取define模块的内容，所以可以看到<strong>define{}里面的内容都要用return{}包起来</strong></p>\n<p>AMD还可以加载html，css文件</p>\n<p>It should look like this</p>\n<pre><code>// content of foo.js  define(&apos;module&apos;s name&apos;,function(){}) 定义模块foo\ndefine(&apos;foo&apos;,function(){\n    return{\n        method: function(){\n            return &quot;foo method&quot;\n        }\n    }\n});\n\n//content of bar.js  define(&apos;module&apos;s name&apos;,[&apos;dependency&apos;],function(){}) 定义依赖模块foo的模块bar\ndefine(&apos;bar&apos;,[&apos;foo&apos;],function(){\n    return{\n        barMethod{\n            return &quot;bar method&quot;\n        }\n        fooMethod{\n            return foo.method();\n        }\n    }\n});\n\n//require([&apos;dependency&apos;],function(){}) 获取模块\nrequire([&apos;bar&apos;],function(){\n    bar.barMethod();\n      bar.fooMethod();\n})\n</code></pre><hr>\n<h3 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h3><h4 id=\"HERE-come-the-export-and-import-keywords\"><a href=\"#HERE-come-the-export-and-import-keywords\" class=\"headerlink\" title=\"HERE come the export and import keywords!\"></a>HERE come the export and import keywords!</h4><p><strong>export</strong></p>\n<pre><code>export var color = &quot;red&quot;;\nexport let name = &quot;Nicholas&quot;;\nexport const magicNumber = 7;\n\nexport function sum(num1, num2) {\n    return num1 + num2;\n}\n\n//export later\nfunction multiply(num1, num2) {\n    return num1 * num2;\n}\nexport multiply;\n</code></pre><p><strong>import{}</strong></p>\n<pre><code>import {identifier1,identifier2,..} from &quot;file&quot;\n\n//import everything\nimport * from &quot;file&quot;\n</code></pre><h4 id=\"some-rules-we-need-to-know\"><a href=\"#some-rules-we-need-to-know\" class=\"headerlink\" title=\"some rules we need to know\"></a>some rules we need to know</h4><ul>\n<li><p>一切都”use strict”</p>\n</li>\n<li><p>只有被export了，才能在其他模块被引用。</p>\n</li>\n<li><p>module的顶级作用域不能用this这个语句</p>\n</li>\n<li><p>需要给每个function和class起名字。但default可以有</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//export  default</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">   \t<span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">import</span> sum <span class=\"keyword\">from</span> <span class=\"string\">\"example\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>));<span class=\"comment\">//3</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>可以rename</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; sum <span class=\"keyword\">as</span> add &#125;;<span class=\"comment\">//在export里改</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; sum <span class=\"keyword\">as</span> add &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"example\"</span>; <span class=\"comment\">//在import里改will do</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(add(<span class=\"number\">1</span>,<span class=\"number\">2</span>));<span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> sum)<span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<p><strong><em>References</em></strong></p>\n<p>[1]<a href=\"https://leanpub.com/understandinges6/read/#leanpub-auto-modules\" target=\"_blank\" rel=\"noopener\">Understanding ECMAScript6-Modules</a></p>\n<p>[2]<a href=\"https://www.safaribooksonline.com/library/view/programming-javascript-applications/9781491950289/ch04.html\" target=\"_blank\" rel=\"noopener\">Programming JavaScript Applications-Chapter 4. Modules</a></p>\n<p>[3]<a href=\"https://www.safaribooksonline.com/library/view/eloquent-javascript-2nd/9781457189821/ch10.html\" target=\"_blank\" rel=\"noopener\">Eloquent JavaScript Chapter10 Modules</a></p>\n<p>[4]<a href=\"https://github.com/vasanthk/js-bits/blob/master/js/amd-commonjs-es6modules.js\" target=\"_blank\" rel=\"noopener\">js-bits</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"what-is-modularity？\"><a href=\"#what-is-modularity？\" class=\"headerlink\" title=\"what is modularity？\"></a>what is modularity？</h2><blockquote>\n<p>JavaScript modules are encapsulated, meaning that they keep implementation details private, and expose a public API.</p>\n</blockquote>\n<p><strong>modules should be</strong></p>\n<blockquote>\n<p><strong><em>specialized:</em></strong>  一个模块是专门解决一个问题的</p>\n</blockquote>\n<blockquote>\n<p><strong><em>independent:</em></strong>  每个模块是独立的。模块之间由API连接</p>\n</blockquote>\n<blockquote>\n<p><strong><em>decomposable:</em></strong> 可分解</p>\n</blockquote>\n<blockquote>\n<p><strong><em>recomposable:</em></strong> 可组合</p>\n</blockquote>\n<blockquote>\n<p><strong><em>substitutable:</em></strong> 可被代替</p>\n</blockquote>\n<hr>\n<h2 id=\"why-modularity？\"><a href=\"#why-modularity？\" class=\"headerlink\" title=\"why modularity？\"></a>why modularity？</h2><p><em>Code complexity grows. And modularity simplifies things!</em></p>\n<p><strong>solution to name collision</strong></p>\n<p>当一个项目大起来的时候，js的代码也越来越多，不进行闭包或者模块化就会产生大量的全局变量，而造成了命名冲突。</p>\n<p><strong>safely  make change</strong></p>\n<p>在我们写一个app的时候，整个app可能由几个部分构成，且它们之间相互联系。在我们没有使每个部分模块化的情况下，对它们进行修改的时候还要考虑到它们对整体的影响。所以我们在进行修改之前，还要go through the whole program, 真是件吃力的事情。但如果把它们都模块化，就可以在这个模块里面直接修改，而不用担心它会对整个项目产生bad effect.</p>\n<p>同样，也不用担心修改其他的部分会影响到它.</p>\n<p><strong>reuse the modules</strong></p>\n<p>模块可以被重复使用，and its API should be clean</p>\n<p><strong>make the code more readable</strong></p>\n<p>也使代码的结构性更强。</p>\n<hr>\n<h3 id=\"function\"><a href=\"#function\" class=\"headerlink\" title=\"function\"></a>function</h3><p><em>只能实现简单的封装。</em></p>\n<pre><code>var math = {\n    add: function add(a,b){\n        return a + b\n    },\n    sub: function sub(a,b){\n        return a - b\n    }\n}\nconsole.log(math.add(1,2));\nconsole.log(add(1,2));//add is undefined\n</code></pre><hr>\n<h3 id=\"IIFE-Immediately-invoked-Function-Expression\"><a href=\"#IIFE-Immediately-invoked-Function-Expression\" class=\"headerlink\" title=\"IIFE: Immediately-invoked Function Expression\"></a>IIFE: Immediately-invoked Function Expression</h3><p><em>能实现访问控制。</em></p>\n<pre><code>var module =(function(){\n    var private = &quot;private&quot;;\n    var foo = function(){\n        console.log(private);\n    }\n    return{\n        foo:foo\n    }\n})();\nconsole.log(module.foo());\nconsole.log(module.private);//undefined\n</code></pre><hr>\n<p>function和IIFE都没有依赖声明。</p>\n<p><strong>我们该怎么更好地模块化呢? </strong></p>\n<h2 id=\"CommonJS-amp-AMD-amp-ES6\"><a href=\"#CommonJS-amp-AMD-amp-ES6\" class=\"headerlink\" title=\"CommonJS &amp; AMD &amp; ES6\"></a>CommonJS &amp; AMD &amp; ES6</h2><hr>\n<h3 id=\"CommonJS\"><a href=\"#CommonJS\" class=\"headerlink\" title=\"CommonJS\"></a>CommonJS</h3><p><strong>多用于server上。不适合浏览器使用，不能发送异步请求。同步require</strong></p>\n<pre><code>//content of foo.js \n//先定义一个foo模块\nvar foo = function () {\n  return &apos;foo method result&apos;;\n};\n//再把foo模块暴露给其他模块\nexports.method = foo\n\n//content of bar.js\nvar Foo = require(&apos;../foo&apos;);//声明依赖foo模块\nvar barMethod = function () {\n  return &apos;barMethod result&apos;;\n};\nvar fooMethod = function () {\n  return Foo.method();\n};\n//export \nexports.barMethod = barMethod;\nexports.fooMethod = fooMethod;\n\n//依赖bar.js 这个模块\nvar bar = require(&apos;bar&apos;);\nbar.barMethod();\nbar.fooMethod();\n</code></pre><hr>\n<h3 id=\"AMD-Asynchronous-Module-Definition\"><a href=\"#AMD-Asynchronous-Module-Definition\" class=\"headerlink\" title=\"AMD (Asynchronous Module Definition)\"></a>AMD (Asynchronous Module Definition)</h3><p>AMD里面模块是被<strong>异步加载</strong>的，加载完后就在缓存里。这能很好地<strong>适应浏览器的环境</strong>，因为这就不需要在每次加载应用时候，把所有的模块都重新加载一遍。而Commonjs，并不能做到这一点，所以说它不适合浏览器环境。</p>\n<p>因为AMD要require一个define过的模块，要立刻获取define模块的内容，所以可以看到<strong>define{}里面的内容都要用return{}包起来</strong></p>\n<p>AMD还可以加载html，css文件</p>\n<p>It should look like this</p>\n<pre><code>// content of foo.js  define(&apos;module&apos;s name&apos;,function(){}) 定义模块foo\ndefine(&apos;foo&apos;,function(){\n    return{\n        method: function(){\n            return &quot;foo method&quot;\n        }\n    }\n});\n\n//content of bar.js  define(&apos;module&apos;s name&apos;,[&apos;dependency&apos;],function(){}) 定义依赖模块foo的模块bar\ndefine(&apos;bar&apos;,[&apos;foo&apos;],function(){\n    return{\n        barMethod{\n            return &quot;bar method&quot;\n        }\n        fooMethod{\n            return foo.method();\n        }\n    }\n});\n\n//require([&apos;dependency&apos;],function(){}) 获取模块\nrequire([&apos;bar&apos;],function(){\n    bar.barMethod();\n      bar.fooMethod();\n})\n</code></pre><hr>\n<h3 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h3><h4 id=\"HERE-come-the-export-and-import-keywords\"><a href=\"#HERE-come-the-export-and-import-keywords\" class=\"headerlink\" title=\"HERE come the export and import keywords!\"></a>HERE come the export and import keywords!</h4><p><strong>export</strong></p>\n<pre><code>export var color = &quot;red&quot;;\nexport let name = &quot;Nicholas&quot;;\nexport const magicNumber = 7;\n\nexport function sum(num1, num2) {\n    return num1 + num2;\n}\n\n//export later\nfunction multiply(num1, num2) {\n    return num1 * num2;\n}\nexport multiply;\n</code></pre><p><strong>import{}</strong></p>\n<pre><code>import {identifier1,identifier2,..} from &quot;file&quot;\n\n//import everything\nimport * from &quot;file&quot;\n</code></pre><h4 id=\"some-rules-we-need-to-know\"><a href=\"#some-rules-we-need-to-know\" class=\"headerlink\" title=\"some rules we need to know\"></a>some rules we need to know</h4><ul>\n<li><p>一切都”use strict”</p>\n</li>\n<li><p>只有被export了，才能在其他模块被引用。</p>\n</li>\n<li><p>module的顶级作用域不能用this这个语句</p>\n</li>\n<li><p>需要给每个function和class起名字。但default可以有</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//export  default</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">   \t<span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">import</span> sum <span class=\"keyword\">from</span> <span class=\"string\">\"example\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>));<span class=\"comment\">//3</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>可以rename</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; sum <span class=\"keyword\">as</span> add &#125;;<span class=\"comment\">//在export里改</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; sum <span class=\"keyword\">as</span> add &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"example\"</span>; <span class=\"comment\">//在import里改will do</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(add(<span class=\"number\">1</span>,<span class=\"number\">2</span>));<span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> sum)<span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<p><strong><em>References</em></strong></p>\n<p>[1]<a href=\"https://leanpub.com/understandinges6/read/#leanpub-auto-modules\" target=\"_blank\" rel=\"noopener\">Understanding ECMAScript6-Modules</a></p>\n<p>[2]<a href=\"https://www.safaribooksonline.com/library/view/programming-javascript-applications/9781491950289/ch04.html\" target=\"_blank\" rel=\"noopener\">Programming JavaScript Applications-Chapter 4. Modules</a></p>\n<p>[3]<a href=\"https://www.safaribooksonline.com/library/view/eloquent-javascript-2nd/9781457189821/ch10.html\" target=\"_blank\" rel=\"noopener\">Eloquent JavaScript Chapter10 Modules</a></p>\n<p>[4]<a href=\"https://github.com/vasanthk/js-bits/blob/master/js/amd-commonjs-es6modules.js\" target=\"_blank\" rel=\"noopener\">js-bits</a></p>\n"},{"title":"初识Event Emitter","date":"2016-12-10T03:55:34.000Z","_content":"\n**Event Emitter** 是“观察者模式（Observer Pattern”在前端的一种呈现方式。\n\n所谓**观察者模式**(Observer Pattern)就是定义对象间的一种一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。\n\n比如，在知乎上，我们关注了某个用户，当这个用户有了动态，我们的TimeLine上面就会显示。如果取消关注之后，就不会再有其动态的推送了。这里，如果把该用户的动态看作是事件的话，我们就是\"订阅者\"，\"监听\"着该用户的动态;该用户就是\"发布者\"，他更新动态就“触发”了该事件。\n\n回到Event emitter。之前在用Vue2.0写一个小东西，需要实现非父子组件通信的时候，发现已经没有了`$dispatch`和 `$broadcast`, 而要用`$emit`, Vue 里面的`$emit` 是什么样的呢？\n\n## Vue $emit\n\n### Vue文档介绍的用法：\n\n```\n//在简单的场景下，使用一个空的 Vue 实例作为中央事件总线：\nvar bus = new Vue()\n// 触发组件 A 中的事件\nbus.$emit('id-selected', 1)\n// 在组件 B 创建的钩子中监听事件\nbus.$on('id-selected', function (id) {\n  // ...\n})\n\n```\n\n尝试了一下，跟着写了一个todo。部分组件结构：Todos -> todo -> delete，现在使delete组件与Todos组件这两个非父子组件用emitter通信。\n\n**首先，创建一个新的Vue实例bus**\n\n```\n//bus.js\nimport Vue from 'vue'\nexport var bus = new Vue()\n\n```\n\n**然后，在存在“发布者”和“订阅者”的组件里面**`import { bus } from 'route to../bus.js'`\n\n```\n//Todos.vue\nimport { bus } from '../bus.js'\n\texport default{\n\t\t//data\n\t\t//components\n\t\t......\n\t\tcreated() {\n\t\t  \t......\n\t\t  \tbus.$on('remove',this.rmTodo)\n\t\t},\n\t\tmethods:{\n\t\t\t......\n  \t\t\trmTodo(todo){\n  \t\t\t\tthis.todos.splice(this.todos.indexOf(todo),1)\n  \t\t\t}\n\t\t}\n\t}\n\n```\n\n```\n//delete.vue\nimport { bus } from '../bus.js'\n\texport default{\n\t\t//Array todos props from parent components\n\t\tmethods:{\n\t\t\tremove(todo){\n\t\t\t\tbus.$emit('remove',this.todo)\n\t\t\t}\n\t\t}\n\t}\n```\n\n这看上去就像，当我们触发了delete组件里的remove 方法时，该组件就会emit 一个“remove”的事件名。而监听了“remove”事件的Todos组件就能接受传入的todo参数，并执行rmTodo。\n\n### 但实际上Event Emitter是怎样的呢？[戳开看Vue源码](https://github.com/vuejs/vue/blob/dev/src/core/instance/events.js)\n\n主要看 `$emit` 和 `$on` 的部分\n\n```\n  Vue.prototype.$emit = function (event: string): Component {\n    const vm: Component = this\n    let cbs = vm._events[event]\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs\n      const args = toArray(arguments, 1)\n      for (let i = 0, l = cbs.length; i < l; i++) {\n        cbs[i].apply(vm, args)\n      }\n    }\n    return vm\n  }\n  \n  Vue.prototype.$on = function (event: string, fn: Function): Component {\n    const vm: Component = this\n    ;(vm._events[event] || (vm._events[event] = [])).push(fn)\n    return vm\n  }\n```\n\n可以看到，vm._events 就像是一个事件管理器，它存放事件名(event:string)作为key，其对应的value就是监听了该事件，并当该事件触发之后执行的所有函数\n\n因为一个事件可能会被多个监听，所以函数存放在数组里，每有一个`$on`,就会把其函数push到对应event的value中\n\n`(vm._events[event] || (vm._events[event] = [])).push(fn)`\n\n当事件被触发后，`$emit`就会找到`vm._events[event]`中的函数数组，传入参数并执行回调。\n\n知道了原理之后，接下来我们尝试...\n\n## 实现一个简单的Event emitter\n\n```\nfunction Emitter(){\n\t//事件管理器\n  this.events = {};\n\n  this.emit = (eventName,data) =>{\n    const event = this.events[eventName];\n    if( event ) {\n    \t//遍历this.events[eventName]数组中的每一个函数，传入data并立即执行\n      event.forEach(fn => {\n        fn.call(null, data);\n      });\n    }    \n  }\n\n  this.subscribe = (eventName, fn) =>{\n  \t//如果this.events中没有该eventName，则创建一个\n    if(!this.events[eventName]) {\n      this.events[eventName] = [];\n    } \n    //把fn推到数组中   \n    this.events[eventName].push(fn);\n  }\n  \n  this.off = (eventName, fn) =>{\n    return () => {\n    \t//移除该事件里面的fn\n      this.events[eventName] = this.events[eventName].filter(eventFn => fn != eventFn)\n      console.log(this.events)\n    }\n  }\n}\n```\n\n以上就是emitter构造函数的所有代码。接下来我们用它来操作一些DOM，来看看具体是怎么样用的\n\n```\n//html\n<body>\n <input type=\"text\">\n <h1></h1>\n <button id=\"btno\">Change name</button>\n <button id=\"btnt\">change color</button>\n</body>\n```\n\n```\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n  let input = document.querySelector('input[type=\"text\"]');\n  let button = document.getElementById('btno');\n  let buttont = document.getElementById('btnt')\n  let h1 = document.querySelector('h1');\n\n  //构造emitter\n  let emitter = new Emitter();\n  \n  //绑定emit，点击该按钮时会触发‘name-changed’事件\n  button.addEventListener('click', () => {\n    emitter.emit('name-changed', {name: input.value});\n  });\n  \n  //绑定了一个emit 和 off，点击该按钮时会触发‘color’事件，并取消'change'事件中的，有回调函数changeName的订阅者的订阅\n  buttont.addEventListener('click', () => {\n    emitter.emit('color', {color: 'red'});\n    emitter.off('change',changeName)()\n  });\n\n  //定义两个function,作为订阅者的回调函数\n  function changeColor(data){\n    h1.style.color = data.color;\n  }\n\n  function changeName(data){\n    h1.innerHTML = `Your name is: ${data.name}`;\n  }\n  \n  //订阅者\n  emitter.subscribe('change', changeName);\n  emitter.subscribe('color', changeColor);\n});\n```\n首先构造一个emitter，emitter里面有事件管理器`this.events={}`和emit，subscribe两个方法。我们试着在两个button上绑定了click用来触发emit。\n\n再写两个订阅者，分别订阅的是“change”和“color”事件。因为之前events管理器中还没有这两个事件，所以`this.events[eventName] = []`来创建以该事件名为key，空数组作为其value的对象，并把订阅者的函数push到数组中。\n\n当点击按钮的时候，就会向事件名对应的函数数组中的每一个函数传入data参数，执行回调\n\n[Demo代码](https://github.com/Amanda111/event-emitter)\n\n\n\n\n\n\n","source":"_posts/初识Event-Emitter.md","raw":"---\ntitle: 初识Event Emitter\ndate: 2016-12-10 11:55:34\ntags:\n---\n\n**Event Emitter** 是“观察者模式（Observer Pattern”在前端的一种呈现方式。\n\n所谓**观察者模式**(Observer Pattern)就是定义对象间的一种一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。\n\n比如，在知乎上，我们关注了某个用户，当这个用户有了动态，我们的TimeLine上面就会显示。如果取消关注之后，就不会再有其动态的推送了。这里，如果把该用户的动态看作是事件的话，我们就是\"订阅者\"，\"监听\"着该用户的动态;该用户就是\"发布者\"，他更新动态就“触发”了该事件。\n\n回到Event emitter。之前在用Vue2.0写一个小东西，需要实现非父子组件通信的时候，发现已经没有了`$dispatch`和 `$broadcast`, 而要用`$emit`, Vue 里面的`$emit` 是什么样的呢？\n\n## Vue $emit\n\n### Vue文档介绍的用法：\n\n```\n//在简单的场景下，使用一个空的 Vue 实例作为中央事件总线：\nvar bus = new Vue()\n// 触发组件 A 中的事件\nbus.$emit('id-selected', 1)\n// 在组件 B 创建的钩子中监听事件\nbus.$on('id-selected', function (id) {\n  // ...\n})\n\n```\n\n尝试了一下，跟着写了一个todo。部分组件结构：Todos -> todo -> delete，现在使delete组件与Todos组件这两个非父子组件用emitter通信。\n\n**首先，创建一个新的Vue实例bus**\n\n```\n//bus.js\nimport Vue from 'vue'\nexport var bus = new Vue()\n\n```\n\n**然后，在存在“发布者”和“订阅者”的组件里面**`import { bus } from 'route to../bus.js'`\n\n```\n//Todos.vue\nimport { bus } from '../bus.js'\n\texport default{\n\t\t//data\n\t\t//components\n\t\t......\n\t\tcreated() {\n\t\t  \t......\n\t\t  \tbus.$on('remove',this.rmTodo)\n\t\t},\n\t\tmethods:{\n\t\t\t......\n  \t\t\trmTodo(todo){\n  \t\t\t\tthis.todos.splice(this.todos.indexOf(todo),1)\n  \t\t\t}\n\t\t}\n\t}\n\n```\n\n```\n//delete.vue\nimport { bus } from '../bus.js'\n\texport default{\n\t\t//Array todos props from parent components\n\t\tmethods:{\n\t\t\tremove(todo){\n\t\t\t\tbus.$emit('remove',this.todo)\n\t\t\t}\n\t\t}\n\t}\n```\n\n这看上去就像，当我们触发了delete组件里的remove 方法时，该组件就会emit 一个“remove”的事件名。而监听了“remove”事件的Todos组件就能接受传入的todo参数，并执行rmTodo。\n\n### 但实际上Event Emitter是怎样的呢？[戳开看Vue源码](https://github.com/vuejs/vue/blob/dev/src/core/instance/events.js)\n\n主要看 `$emit` 和 `$on` 的部分\n\n```\n  Vue.prototype.$emit = function (event: string): Component {\n    const vm: Component = this\n    let cbs = vm._events[event]\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs\n      const args = toArray(arguments, 1)\n      for (let i = 0, l = cbs.length; i < l; i++) {\n        cbs[i].apply(vm, args)\n      }\n    }\n    return vm\n  }\n  \n  Vue.prototype.$on = function (event: string, fn: Function): Component {\n    const vm: Component = this\n    ;(vm._events[event] || (vm._events[event] = [])).push(fn)\n    return vm\n  }\n```\n\n可以看到，vm._events 就像是一个事件管理器，它存放事件名(event:string)作为key，其对应的value就是监听了该事件，并当该事件触发之后执行的所有函数\n\n因为一个事件可能会被多个监听，所以函数存放在数组里，每有一个`$on`,就会把其函数push到对应event的value中\n\n`(vm._events[event] || (vm._events[event] = [])).push(fn)`\n\n当事件被触发后，`$emit`就会找到`vm._events[event]`中的函数数组，传入参数并执行回调。\n\n知道了原理之后，接下来我们尝试...\n\n## 实现一个简单的Event emitter\n\n```\nfunction Emitter(){\n\t//事件管理器\n  this.events = {};\n\n  this.emit = (eventName,data) =>{\n    const event = this.events[eventName];\n    if( event ) {\n    \t//遍历this.events[eventName]数组中的每一个函数，传入data并立即执行\n      event.forEach(fn => {\n        fn.call(null, data);\n      });\n    }    \n  }\n\n  this.subscribe = (eventName, fn) =>{\n  \t//如果this.events中没有该eventName，则创建一个\n    if(!this.events[eventName]) {\n      this.events[eventName] = [];\n    } \n    //把fn推到数组中   \n    this.events[eventName].push(fn);\n  }\n  \n  this.off = (eventName, fn) =>{\n    return () => {\n    \t//移除该事件里面的fn\n      this.events[eventName] = this.events[eventName].filter(eventFn => fn != eventFn)\n      console.log(this.events)\n    }\n  }\n}\n```\n\n以上就是emitter构造函数的所有代码。接下来我们用它来操作一些DOM，来看看具体是怎么样用的\n\n```\n//html\n<body>\n <input type=\"text\">\n <h1></h1>\n <button id=\"btno\">Change name</button>\n <button id=\"btnt\">change color</button>\n</body>\n```\n\n```\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n  let input = document.querySelector('input[type=\"text\"]');\n  let button = document.getElementById('btno');\n  let buttont = document.getElementById('btnt')\n  let h1 = document.querySelector('h1');\n\n  //构造emitter\n  let emitter = new Emitter();\n  \n  //绑定emit，点击该按钮时会触发‘name-changed’事件\n  button.addEventListener('click', () => {\n    emitter.emit('name-changed', {name: input.value});\n  });\n  \n  //绑定了一个emit 和 off，点击该按钮时会触发‘color’事件，并取消'change'事件中的，有回调函数changeName的订阅者的订阅\n  buttont.addEventListener('click', () => {\n    emitter.emit('color', {color: 'red'});\n    emitter.off('change',changeName)()\n  });\n\n  //定义两个function,作为订阅者的回调函数\n  function changeColor(data){\n    h1.style.color = data.color;\n  }\n\n  function changeName(data){\n    h1.innerHTML = `Your name is: ${data.name}`;\n  }\n  \n  //订阅者\n  emitter.subscribe('change', changeName);\n  emitter.subscribe('color', changeColor);\n});\n```\n首先构造一个emitter，emitter里面有事件管理器`this.events={}`和emit，subscribe两个方法。我们试着在两个button上绑定了click用来触发emit。\n\n再写两个订阅者，分别订阅的是“change”和“color”事件。因为之前events管理器中还没有这两个事件，所以`this.events[eventName] = []`来创建以该事件名为key，空数组作为其value的对象，并把订阅者的函数push到数组中。\n\n当点击按钮的时候，就会向事件名对应的函数数组中的每一个函数传入data参数，执行回调\n\n[Demo代码](https://github.com/Amanda111/event-emitter)\n\n\n\n\n\n\n","slug":"初识Event-Emitter","published":1,"updated":"2016-12-11T05:56:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwg4o3tb00046v6kb6keuq2q","content":"<p><strong>Event Emitter</strong> 是“观察者模式（Observer Pattern”在前端的一种呈现方式。</p>\n<p>所谓<strong>观察者模式</strong>(Observer Pattern)就是定义对象间的一种一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。</p>\n<p>比如，在知乎上，我们关注了某个用户，当这个用户有了动态，我们的TimeLine上面就会显示。如果取消关注之后，就不会再有其动态的推送了。这里，如果把该用户的动态看作是事件的话，我们就是”订阅者”，”监听”着该用户的动态;该用户就是”发布者”，他更新动态就“触发”了该事件。</p>\n<p>回到Event emitter。之前在用Vue2.0写一个小东西，需要实现非父子组件通信的时候，发现已经没有了<code>$dispatch</code>和 <code>$broadcast</code>, 而要用<code>$emit</code>, Vue 里面的<code>$emit</code> 是什么样的呢？</p>\n<h2 id=\"Vue-emit\"><a href=\"#Vue-emit\" class=\"headerlink\" title=\"Vue $emit\"></a>Vue $emit</h2><h3 id=\"Vue文档介绍的用法：\"><a href=\"#Vue文档介绍的用法：\" class=\"headerlink\" title=\"Vue文档介绍的用法：\"></a>Vue文档介绍的用法：</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在简单的场景下，使用一个空的 Vue 实例作为中央事件总线：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bus = <span class=\"keyword\">new</span> Vue()</span><br><span class=\"line\"><span class=\"comment\">// 触发组件 A 中的事件</span></span><br><span class=\"line\">bus.$emit(<span class=\"string\">'id-selected'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">// 在组件 B 创建的钩子中监听事件</span></span><br><span class=\"line\">bus.$on(<span class=\"string\">'id-selected'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(id)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>尝试了一下，跟着写了一个todo。部分组件结构：Todos -&gt; todo -&gt; delete，现在使delete组件与Todos组件这两个非父子组件用emitter通信。</p>\n<p><strong>首先，创建一个新的Vue实例bus</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//bus.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> bus = <span class=\"keyword\">new</span> Vue()</span><br></pre></td></tr></table></figure>\n<p><strong>然后，在存在“发布者”和“订阅者”的组件里面</strong><code>import { bus } from &#39;route to../bus.js&#39;</code></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Todos.vue</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; bus &#125; from <span class=\"string\">'../bus.js'</span></span><br><span class=\"line\">\texport <span class=\"keyword\">default</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//data</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//components</span></span><br><span class=\"line\">\t\t......</span><br><span class=\"line\">\t\tcreated() &#123;</span><br><span class=\"line\">\t\t  \t......</span><br><span class=\"line\">\t\t  \tbus.$on(<span class=\"string\">'remove'</span>,<span class=\"keyword\">this</span>.rmTodo)</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tmethods:&#123;</span><br><span class=\"line\">\t\t\t......</span><br><span class=\"line\">  \t\t\trmTodo(todo)&#123;</span><br><span class=\"line\">  \t\t\t\t<span class=\"keyword\">this</span>.todos.splice(<span class=\"keyword\">this</span>.todos.indexOf(todo),<span class=\"number\">1</span>)</span><br><span class=\"line\">  \t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//delete.vue</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; bus &#125; from <span class=\"string\">'../bus.js'</span></span><br><span class=\"line\">\t<span class=\"keyword\">export</span> <span class=\"built_in\">default</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//Array todos props from parent components</span></span><br><span class=\"line\">\t\tmethods:&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">remove</span>(todo)&#123;</span><br><span class=\"line\">\t\t\t\tbus.$emit(<span class=\"string\">'remove'</span>,<span class=\"keyword\">this</span>.todo)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>这看上去就像，当我们触发了delete组件里的remove 方法时，该组件就会emit 一个“remove”的事件名。而监听了“remove”事件的Todos组件就能接受传入的todo参数，并执行rmTodo。</p>\n<h3 id=\"但实际上Event-Emitter是怎样的呢？戳开看Vue源码\"><a href=\"#但实际上Event-Emitter是怎样的呢？戳开看Vue源码\" class=\"headerlink\" title=\"但实际上Event Emitter是怎样的呢？戳开看Vue源码\"></a>但实际上Event Emitter是怎样的呢？<a href=\"https://github.com/vuejs/vue/blob/dev/src/core/instance/events.js\" target=\"_blank\" rel=\"noopener\">戳开看Vue源码</a></h3><p>主要看 <code>$emit</code> 和 <code>$on</code> 的部分</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue<span class=\"variable\">.prototype</span>.$emit = <span class=\"keyword\">function</span> (<span class=\"keyword\">event</span>: <span class=\"keyword\">string</span>): Component &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> vm: Component = <span class=\"keyword\">this</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> cbs = vm<span class=\"variable\">._events</span>[<span class=\"keyword\">event</span>]</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cbs) &#123;</span><br><span class=\"line\">    cbs = cbs<span class=\"variable\">.length</span> &gt; <span class=\"number\">1</span> ? toArray(cbs) : cbs</span><br><span class=\"line\">    <span class=\"keyword\">const</span> args = toArray(arguments, <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = cbs<span class=\"variable\">.length</span>; i &lt; l; i++) &#123;</span><br><span class=\"line\">      cbs[i]<span class=\"variable\">.apply</span>(vm, args)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> vm</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue<span class=\"variable\">.prototype</span>.$on = <span class=\"keyword\">function</span> (<span class=\"keyword\">event</span>: <span class=\"keyword\">string</span>, fn: Function): Component &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> vm: Component = <span class=\"keyword\">this</span></span><br><span class=\"line\">  ;(vm<span class=\"variable\">._events</span>[<span class=\"keyword\">event</span>] || (vm<span class=\"variable\">._events</span>[<span class=\"keyword\">event</span>] = []))<span class=\"variable\">.push</span>(fn)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> vm</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，vm._events 就像是一个事件管理器，它存放事件名(event:string)作为key，其对应的value就是监听了该事件，并当该事件触发之后执行的所有函数</p>\n<p>因为一个事件可能会被多个监听，所以函数存放在数组里，每有一个<code>$on</code>,就会把其函数push到对应event的value中</p>\n<p><code>(vm._events[event] || (vm._events[event] = [])).push(fn)</code></p>\n<p>当事件被触发后，<code>$emit</code>就会找到<code>vm._events[event]</code>中的函数数组，传入参数并执行回调。</p>\n<p>知道了原理之后，接下来我们尝试…</p>\n<h2 id=\"实现一个简单的Event-emitter\"><a href=\"#实现一个简单的Event-emitter\" class=\"headerlink\" title=\"实现一个简单的Event emitter\"></a>实现一个简单的Event emitter</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Emitter</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//事件管理器</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.events = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.emit = <span class=\"function\">(<span class=\"params\">eventName,data</span>) =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> event = <span class=\"keyword\">this</span>.events[eventName];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( event ) &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//遍历this.events[eventName]数组中的每一个函数，传入data并立即执行</span></span><br><span class=\"line\">      event.forEach(<span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> &#123;</span><br><span class=\"line\">        fn.call(<span class=\"literal\">null</span>, data);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.subscribe = <span class=\"function\">(<span class=\"params\">eventName, fn</span>) =&gt;</span>&#123;</span><br><span class=\"line\">  \t<span class=\"comment\">//如果this.events中没有该eventName，则创建一个</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>.events[eventName]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.events[eventName] = [];</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"comment\">//把fn推到数组中   </span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.events[eventName].push(fn);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">this</span>.off = <span class=\"function\">(<span class=\"params\">eventName, fn</span>) =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//移除该事件里面的fn</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.events[eventName] = <span class=\"keyword\">this</span>.events[eventName].filter(<span class=\"function\"><span class=\"params\">eventFn</span> =&gt;</span> fn != eventFn)</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.events)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上就是emitter构造函数的所有代码。接下来我们用它来操作一些DOM，来看看具体是怎么样用的</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//html</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btno\"</span>&gt;</span>Change name<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btnt\"</span>&gt;</span>change color<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"DOMContentLoaded\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> input = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'input[type=\"text\"]'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> button = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btno'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> buttont = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btnt'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> h1 = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'h1'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//构造emitter</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> emitter = <span class=\"keyword\">new</span> Emitter();</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//绑定emit，点击该按钮时会触发‘name-changed’事件</span></span><br><span class=\"line\">  button.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    emitter.emit(<span class=\"string\">'name-changed'</span>, &#123;name: input.value&#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//绑定了一个emit 和 off，点击该按钮时会触发‘color’事件，并取消'change'事件中的，有回调函数changeName的订阅者的订阅</span></span><br><span class=\"line\">  buttont.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    emitter.emit(<span class=\"string\">'color'</span>, &#123;color: <span class=\"string\">'red'</span>&#125;);</span><br><span class=\"line\">    emitter.off(<span class=\"string\">'change'</span>,changeName)()</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//定义两个function,作为订阅者的回调函数</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeColor</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    h1.style.color = data.color;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeName</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    h1.innerHTML = <span class=\"string\">`Your name is: <span class=\"subst\">$&#123;data.name&#125;</span>`</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//订阅者</span></span><br><span class=\"line\">  emitter.subscribe(<span class=\"string\">'change'</span>, changeName);</span><br><span class=\"line\">  emitter.subscribe(<span class=\"string\">'color'</span>, changeColor);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>首先构造一个emitter，emitter里面有事件管理器<code>this.events={}</code>和emit，subscribe两个方法。我们试着在两个button上绑定了click用来触发emit。</p>\n<p>再写两个订阅者，分别订阅的是“change”和“color”事件。因为之前events管理器中还没有这两个事件，所以<code>this.events[eventName] = []</code>来创建以该事件名为key，空数组作为其value的对象，并把订阅者的函数push到数组中。</p>\n<p>当点击按钮的时候，就会向事件名对应的函数数组中的每一个函数传入data参数，执行回调</p>\n<p><a href=\"https://github.com/Amanda111/event-emitter\" target=\"_blank\" rel=\"noopener\">Demo代码</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>Event Emitter</strong> 是“观察者模式（Observer Pattern”在前端的一种呈现方式。</p>\n<p>所谓<strong>观察者模式</strong>(Observer Pattern)就是定义对象间的一种一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。</p>\n<p>比如，在知乎上，我们关注了某个用户，当这个用户有了动态，我们的TimeLine上面就会显示。如果取消关注之后，就不会再有其动态的推送了。这里，如果把该用户的动态看作是事件的话，我们就是”订阅者”，”监听”着该用户的动态;该用户就是”发布者”，他更新动态就“触发”了该事件。</p>\n<p>回到Event emitter。之前在用Vue2.0写一个小东西，需要实现非父子组件通信的时候，发现已经没有了<code>$dispatch</code>和 <code>$broadcast</code>, 而要用<code>$emit</code>, Vue 里面的<code>$emit</code> 是什么样的呢？</p>\n<h2 id=\"Vue-emit\"><a href=\"#Vue-emit\" class=\"headerlink\" title=\"Vue $emit\"></a>Vue $emit</h2><h3 id=\"Vue文档介绍的用法：\"><a href=\"#Vue文档介绍的用法：\" class=\"headerlink\" title=\"Vue文档介绍的用法：\"></a>Vue文档介绍的用法：</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在简单的场景下，使用一个空的 Vue 实例作为中央事件总线：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bus = <span class=\"keyword\">new</span> Vue()</span><br><span class=\"line\"><span class=\"comment\">// 触发组件 A 中的事件</span></span><br><span class=\"line\">bus.$emit(<span class=\"string\">'id-selected'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">// 在组件 B 创建的钩子中监听事件</span></span><br><span class=\"line\">bus.$on(<span class=\"string\">'id-selected'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(id)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>尝试了一下，跟着写了一个todo。部分组件结构：Todos -&gt; todo -&gt; delete，现在使delete组件与Todos组件这两个非父子组件用emitter通信。</p>\n<p><strong>首先，创建一个新的Vue实例bus</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//bus.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> bus = <span class=\"keyword\">new</span> Vue()</span><br></pre></td></tr></table></figure>\n<p><strong>然后，在存在“发布者”和“订阅者”的组件里面</strong><code>import { bus } from &#39;route to../bus.js&#39;</code></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Todos.vue</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; bus &#125; from <span class=\"string\">'../bus.js'</span></span><br><span class=\"line\">\texport <span class=\"keyword\">default</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//data</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//components</span></span><br><span class=\"line\">\t\t......</span><br><span class=\"line\">\t\tcreated() &#123;</span><br><span class=\"line\">\t\t  \t......</span><br><span class=\"line\">\t\t  \tbus.$on(<span class=\"string\">'remove'</span>,<span class=\"keyword\">this</span>.rmTodo)</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tmethods:&#123;</span><br><span class=\"line\">\t\t\t......</span><br><span class=\"line\">  \t\t\trmTodo(todo)&#123;</span><br><span class=\"line\">  \t\t\t\t<span class=\"keyword\">this</span>.todos.splice(<span class=\"keyword\">this</span>.todos.indexOf(todo),<span class=\"number\">1</span>)</span><br><span class=\"line\">  \t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//delete.vue</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; bus &#125; from <span class=\"string\">'../bus.js'</span></span><br><span class=\"line\">\t<span class=\"keyword\">export</span> <span class=\"built_in\">default</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//Array todos props from parent components</span></span><br><span class=\"line\">\t\tmethods:&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">remove</span>(todo)&#123;</span><br><span class=\"line\">\t\t\t\tbus.$emit(<span class=\"string\">'remove'</span>,<span class=\"keyword\">this</span>.todo)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>这看上去就像，当我们触发了delete组件里的remove 方法时，该组件就会emit 一个“remove”的事件名。而监听了“remove”事件的Todos组件就能接受传入的todo参数，并执行rmTodo。</p>\n<h3 id=\"但实际上Event-Emitter是怎样的呢？戳开看Vue源码\"><a href=\"#但实际上Event-Emitter是怎样的呢？戳开看Vue源码\" class=\"headerlink\" title=\"但实际上Event Emitter是怎样的呢？戳开看Vue源码\"></a>但实际上Event Emitter是怎样的呢？<a href=\"https://github.com/vuejs/vue/blob/dev/src/core/instance/events.js\" target=\"_blank\" rel=\"noopener\">戳开看Vue源码</a></h3><p>主要看 <code>$emit</code> 和 <code>$on</code> 的部分</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue<span class=\"variable\">.prototype</span>.$emit = <span class=\"keyword\">function</span> (<span class=\"keyword\">event</span>: <span class=\"keyword\">string</span>): Component &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> vm: Component = <span class=\"keyword\">this</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> cbs = vm<span class=\"variable\">._events</span>[<span class=\"keyword\">event</span>]</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cbs) &#123;</span><br><span class=\"line\">    cbs = cbs<span class=\"variable\">.length</span> &gt; <span class=\"number\">1</span> ? toArray(cbs) : cbs</span><br><span class=\"line\">    <span class=\"keyword\">const</span> args = toArray(arguments, <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = cbs<span class=\"variable\">.length</span>; i &lt; l; i++) &#123;</span><br><span class=\"line\">      cbs[i]<span class=\"variable\">.apply</span>(vm, args)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> vm</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue<span class=\"variable\">.prototype</span>.$on = <span class=\"keyword\">function</span> (<span class=\"keyword\">event</span>: <span class=\"keyword\">string</span>, fn: Function): Component &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> vm: Component = <span class=\"keyword\">this</span></span><br><span class=\"line\">  ;(vm<span class=\"variable\">._events</span>[<span class=\"keyword\">event</span>] || (vm<span class=\"variable\">._events</span>[<span class=\"keyword\">event</span>] = []))<span class=\"variable\">.push</span>(fn)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> vm</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，vm._events 就像是一个事件管理器，它存放事件名(event:string)作为key，其对应的value就是监听了该事件，并当该事件触发之后执行的所有函数</p>\n<p>因为一个事件可能会被多个监听，所以函数存放在数组里，每有一个<code>$on</code>,就会把其函数push到对应event的value中</p>\n<p><code>(vm._events[event] || (vm._events[event] = [])).push(fn)</code></p>\n<p>当事件被触发后，<code>$emit</code>就会找到<code>vm._events[event]</code>中的函数数组，传入参数并执行回调。</p>\n<p>知道了原理之后，接下来我们尝试…</p>\n<h2 id=\"实现一个简单的Event-emitter\"><a href=\"#实现一个简单的Event-emitter\" class=\"headerlink\" title=\"实现一个简单的Event emitter\"></a>实现一个简单的Event emitter</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Emitter</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//事件管理器</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.events = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.emit = <span class=\"function\">(<span class=\"params\">eventName,data</span>) =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> event = <span class=\"keyword\">this</span>.events[eventName];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( event ) &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//遍历this.events[eventName]数组中的每一个函数，传入data并立即执行</span></span><br><span class=\"line\">      event.forEach(<span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> &#123;</span><br><span class=\"line\">        fn.call(<span class=\"literal\">null</span>, data);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.subscribe = <span class=\"function\">(<span class=\"params\">eventName, fn</span>) =&gt;</span>&#123;</span><br><span class=\"line\">  \t<span class=\"comment\">//如果this.events中没有该eventName，则创建一个</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>.events[eventName]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.events[eventName] = [];</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"comment\">//把fn推到数组中   </span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.events[eventName].push(fn);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">this</span>.off = <span class=\"function\">(<span class=\"params\">eventName, fn</span>) =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//移除该事件里面的fn</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.events[eventName] = <span class=\"keyword\">this</span>.events[eventName].filter(<span class=\"function\"><span class=\"params\">eventFn</span> =&gt;</span> fn != eventFn)</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.events)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上就是emitter构造函数的所有代码。接下来我们用它来操作一些DOM，来看看具体是怎么样用的</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//html</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btno\"</span>&gt;</span>Change name<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btnt\"</span>&gt;</span>change color<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"DOMContentLoaded\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> input = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'input[type=\"text\"]'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> button = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btno'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> buttont = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btnt'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> h1 = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'h1'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//构造emitter</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> emitter = <span class=\"keyword\">new</span> Emitter();</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//绑定emit，点击该按钮时会触发‘name-changed’事件</span></span><br><span class=\"line\">  button.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    emitter.emit(<span class=\"string\">'name-changed'</span>, &#123;name: input.value&#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//绑定了一个emit 和 off，点击该按钮时会触发‘color’事件，并取消'change'事件中的，有回调函数changeName的订阅者的订阅</span></span><br><span class=\"line\">  buttont.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    emitter.emit(<span class=\"string\">'color'</span>, &#123;color: <span class=\"string\">'red'</span>&#125;);</span><br><span class=\"line\">    emitter.off(<span class=\"string\">'change'</span>,changeName)()</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//定义两个function,作为订阅者的回调函数</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeColor</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    h1.style.color = data.color;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeName</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    h1.innerHTML = <span class=\"string\">`Your name is: <span class=\"subst\">$&#123;data.name&#125;</span>`</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//订阅者</span></span><br><span class=\"line\">  emitter.subscribe(<span class=\"string\">'change'</span>, changeName);</span><br><span class=\"line\">  emitter.subscribe(<span class=\"string\">'color'</span>, changeColor);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>首先构造一个emitter，emitter里面有事件管理器<code>this.events={}</code>和emit，subscribe两个方法。我们试着在两个button上绑定了click用来触发emit。</p>\n<p>再写两个订阅者，分别订阅的是“change”和“color”事件。因为之前events管理器中还没有这两个事件，所以<code>this.events[eventName] = []</code>来创建以该事件名为key，空数组作为其value的对象，并把订阅者的函数push到数组中。</p>\n<p>当点击按钮的时候，就会向事件名对应的函数数组中的每一个函数传入data参数，执行回调</p>\n<p><a href=\"https://github.com/Amanda111/event-emitter\" target=\"_blank\" rel=\"noopener\">Demo代码</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}